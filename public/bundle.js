/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={550:function(t,e,i){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function s(t,e,i){if(s.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var o;"object"==typeof t?t.exports=s:e.BN=s,s.BN=s,s.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:i(601).Buffer}catch(t){}function h(t,e){var i=t.charCodeAt(e);return i>=65&&i<=70?i-55:i>=97&&i<=102?i-87:i-48&15}function u(t,e,i){var r=h(t,i);return i-1>=e&&(r|=h(t,i-1)<<4),r}function a(t,e,i,r){for(var n=0,s=Math.min(t.length,i),o=e;o<s;o++){var h=t.charCodeAt(o)-48;n*=r,n+=h>=49?h-49+10:h>=17?h-17+10:h}return n}s.isBN=function(t){return t instanceof s||null!==t&&"object"==typeof t&&t.constructor.wordSize===s.wordSize&&Array.isArray(t.words)},s.max=function(t,e){return t.cmp(e)>0?t:e},s.min=function(t,e){return t.cmp(e)<0?t:e},s.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===e?this._parseHex(t,n,i):(this._parseBase(t,e,n),"le"===i&&this._initArray(this.toArray(),e,i)))},s.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},s.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var s,o,h=0;if("be"===i)for(n=t.length-1,s=0;n>=0;n-=3)o=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[s]|=o<<h&67108863,this.words[s+1]=o>>>26-h&67108863,(h+=24)>=26&&(h-=26,s++);else if("le"===i)for(n=0,s=0;n<t.length;n+=3)o=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[s]|=o<<h&67108863,this.words[s+1]=o>>>26-h&67108863,(h+=24)>=26&&(h-=26,s++);return this.strip()},s.prototype._parseHex=function(t,e,i){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,s=0,o=0;if("be"===i)for(r=t.length-1;r>=e;r-=2)n=u(t,e,r)<<s,this.words[o]|=67108863&n,s>=18?(s-=18,o+=1,this.words[o]|=n>>>26):s+=8;else for(r=(t.length-e)%2==0?e+1:e;r<t.length;r+=2)n=u(t,e,r)<<s,this.words[o]|=67108863&n,s>=18?(s-=18,o+=1,this.words[o]|=n>>>26):s+=8;this.strip()},s.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var s=t.length-i,o=s%r,h=Math.min(s,s-o)+i,u=0,l=i;l<h;l+=r)u=a(t,l,l+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==o){var c=1;for(u=a(t,l,t.length,e),l=0;l<o;l++)c*=e;this.imuln(c),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},s.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},s.prototype.clone=function(){var t=new s(null);return this.copy(t),t},s.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},s.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},s.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},s.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],s=0|e.words[0],o=n*s,h=67108863&o,u=o/67108864|0;i.words[0]=h;for(var a=1;a<r;a++){for(var l=u>>>26,c=67108863&u,f=Math.min(a,e.length-1),d=Math.max(0,a-t.length+1);d<=f;d++){var m=a-d|0;l+=(o=(n=0|t.words[m])*(s=0|e.words[d])+c)/67108864|0,c=67108863&o}i.words[a]=0|c,u=0|l}return 0!==u?i.words[a]=0|u:i.length--,i.strip()}s.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,s=0,o=0;o<this.length;o++){var h=this.words[o],u=(16777215&(h<<n|s)).toString(16);i=0!=(s=h>>>24-n&16777215)||o!==this.length-1?l[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,o--)}for(0!==s&&(i=s.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var a=c[t],d=f[t];i="";var m=this.clone();for(m.negative=0;!m.isZero();){var p=m.modn(d).toString(t);i=(m=m.idivn(d)).isZero()?p+i:l[a-p.length]+p+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},s.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},s.prototype.toJSON=function(){return this.toString(16)},s.prototype.toBuffer=function(t,e){return r(void 0!==o),this.toArrayLike(o,t,e)},s.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},s.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),s=i||Math.max(1,n);r(n<=s,"byte array longer than desired length"),r(s>0,"Requested array length <= 0"),this.strip();var o,h,u="le"===e,a=new t(s),l=this.clone();if(u){for(h=0;!l.isZero();h++)o=l.andln(255),l.iushrn(8),a[h]=o;for(;h<s;h++)a[h]=0}else{for(h=0;h<s-n;h++)a[h]=0;for(h=0;!l.isZero();h++)o=l.andln(255),l.iushrn(8),a[s-h-1]=o}return a},Math.clz32?s.prototype._countBits=function(t){return 32-Math.clz32(t)}:s.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},s.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},s.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},s.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},s.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},s.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},s.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},s.prototype.isNeg=function(){return 0!==this.negative},s.prototype.neg=function(){return this.clone().ineg()},s.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},s.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},s.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},s.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},s.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},s.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},s.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},s.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},s.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},s.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},s.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},s.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},s.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},s.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},s.prototype.notn=function(t){return this.clone().inotn(t)},s.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},s.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,s=0;s<r.length;s++)e=(0|i.words[s])+(0|r.words[s])+n,this.words[s]=67108863&e,n=e>>>26;for(;0!==n&&s<i.length;s++)e=(0|i.words[s])+n,this.words[s]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;s<i.length;s++)this.words[s]=i.words[s];return this},s.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},s.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var s=0,o=0;o<r.length;o++)s=(e=(0|i.words[o])-(0|r.words[o])+s)>>26,this.words[o]=67108863&e;for(;0!==s&&o<i.length;o++)s=(e=(0|i.words[o])+s)>>26,this.words[o]=67108863&e;if(0===s&&o<i.length&&i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this.length=Math.max(this.length,o),i!==this&&(this.negative=1),this.strip()},s.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,e,i){var r,n,s,o=t.words,h=e.words,u=i.words,a=0,l=0|o[0],c=8191&l,f=l>>>13,d=0|o[1],m=8191&d,p=d>>>13,g=0|o[2],y=8191&g,w=g>>>13,v=0|o[3],b=8191&v,_=v>>>13,M=0|o[4],x=8191&M,A=M>>>13,E=0|o[5],N=8191&E,O=E>>>13,S=0|o[6],k=8191&S,C=S>>>13,T=0|o[7],R=8191&T,I=T>>>13,L=0|o[8],j=8191&L,D=L>>>13,B=0|o[9],z=8191&B,P=B>>>13,F=0|h[0],U=8191&F,q=F>>>13,H=0|h[1],Z=8191&H,G=H>>>13,X=0|h[2],V=8191&X,Y=X>>>13,W=0|h[3],K=8191&W,$=W>>>13,J=0|h[4],Q=8191&J,tt=J>>>13,et=0|h[5],it=8191&et,rt=et>>>13,nt=0|h[6],st=8191&nt,ot=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,lt=0|h[8],ct=8191&lt,ft=lt>>>13,dt=0|h[9],mt=8191&dt,pt=dt>>>13;i.negative=t.negative^e.negative,i.length=19;var gt=(a+(r=Math.imul(c,U))|0)+((8191&(n=(n=Math.imul(c,q))+Math.imul(f,U)|0))<<13)|0;a=((s=Math.imul(f,q))+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(m,U),n=(n=Math.imul(m,q))+Math.imul(p,U)|0,s=Math.imul(p,q);var yt=(a+(r=r+Math.imul(c,Z)|0)|0)+((8191&(n=(n=n+Math.imul(c,G)|0)+Math.imul(f,Z)|0))<<13)|0;a=((s=s+Math.imul(f,G)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(y,U),n=(n=Math.imul(y,q))+Math.imul(w,U)|0,s=Math.imul(w,q),r=r+Math.imul(m,Z)|0,n=(n=n+Math.imul(m,G)|0)+Math.imul(p,Z)|0,s=s+Math.imul(p,G)|0;var wt=(a+(r=r+Math.imul(c,V)|0)|0)+((8191&(n=(n=n+Math.imul(c,Y)|0)+Math.imul(f,V)|0))<<13)|0;a=((s=s+Math.imul(f,Y)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(b,U),n=(n=Math.imul(b,q))+Math.imul(_,U)|0,s=Math.imul(_,q),r=r+Math.imul(y,Z)|0,n=(n=n+Math.imul(y,G)|0)+Math.imul(w,Z)|0,s=s+Math.imul(w,G)|0,r=r+Math.imul(m,V)|0,n=(n=n+Math.imul(m,Y)|0)+Math.imul(p,V)|0,s=s+Math.imul(p,Y)|0;var vt=(a+(r=r+Math.imul(c,K)|0)|0)+((8191&(n=(n=n+Math.imul(c,$)|0)+Math.imul(f,K)|0))<<13)|0;a=((s=s+Math.imul(f,$)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(x,U),n=(n=Math.imul(x,q))+Math.imul(A,U)|0,s=Math.imul(A,q),r=r+Math.imul(b,Z)|0,n=(n=n+Math.imul(b,G)|0)+Math.imul(_,Z)|0,s=s+Math.imul(_,G)|0,r=r+Math.imul(y,V)|0,n=(n=n+Math.imul(y,Y)|0)+Math.imul(w,V)|0,s=s+Math.imul(w,Y)|0,r=r+Math.imul(m,K)|0,n=(n=n+Math.imul(m,$)|0)+Math.imul(p,K)|0,s=s+Math.imul(p,$)|0;var bt=(a+(r=r+Math.imul(c,Q)|0)|0)+((8191&(n=(n=n+Math.imul(c,tt)|0)+Math.imul(f,Q)|0))<<13)|0;a=((s=s+Math.imul(f,tt)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,q))+Math.imul(O,U)|0,s=Math.imul(O,q),r=r+Math.imul(x,Z)|0,n=(n=n+Math.imul(x,G)|0)+Math.imul(A,Z)|0,s=s+Math.imul(A,G)|0,r=r+Math.imul(b,V)|0,n=(n=n+Math.imul(b,Y)|0)+Math.imul(_,V)|0,s=s+Math.imul(_,Y)|0,r=r+Math.imul(y,K)|0,n=(n=n+Math.imul(y,$)|0)+Math.imul(w,K)|0,s=s+Math.imul(w,$)|0,r=r+Math.imul(m,Q)|0,n=(n=n+Math.imul(m,tt)|0)+Math.imul(p,Q)|0,s=s+Math.imul(p,tt)|0;var _t=(a+(r=r+Math.imul(c,it)|0)|0)+((8191&(n=(n=n+Math.imul(c,rt)|0)+Math.imul(f,it)|0))<<13)|0;a=((s=s+Math.imul(f,rt)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(k,U),n=(n=Math.imul(k,q))+Math.imul(C,U)|0,s=Math.imul(C,q),r=r+Math.imul(N,Z)|0,n=(n=n+Math.imul(N,G)|0)+Math.imul(O,Z)|0,s=s+Math.imul(O,G)|0,r=r+Math.imul(x,V)|0,n=(n=n+Math.imul(x,Y)|0)+Math.imul(A,V)|0,s=s+Math.imul(A,Y)|0,r=r+Math.imul(b,K)|0,n=(n=n+Math.imul(b,$)|0)+Math.imul(_,K)|0,s=s+Math.imul(_,$)|0,r=r+Math.imul(y,Q)|0,n=(n=n+Math.imul(y,tt)|0)+Math.imul(w,Q)|0,s=s+Math.imul(w,tt)|0,r=r+Math.imul(m,it)|0,n=(n=n+Math.imul(m,rt)|0)+Math.imul(p,it)|0,s=s+Math.imul(p,rt)|0;var Mt=(a+(r=r+Math.imul(c,st)|0)|0)+((8191&(n=(n=n+Math.imul(c,ot)|0)+Math.imul(f,st)|0))<<13)|0;a=((s=s+Math.imul(f,ot)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,q))+Math.imul(I,U)|0,s=Math.imul(I,q),r=r+Math.imul(k,Z)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(C,Z)|0,s=s+Math.imul(C,G)|0,r=r+Math.imul(N,V)|0,n=(n=n+Math.imul(N,Y)|0)+Math.imul(O,V)|0,s=s+Math.imul(O,Y)|0,r=r+Math.imul(x,K)|0,n=(n=n+Math.imul(x,$)|0)+Math.imul(A,K)|0,s=s+Math.imul(A,$)|0,r=r+Math.imul(b,Q)|0,n=(n=n+Math.imul(b,tt)|0)+Math.imul(_,Q)|0,s=s+Math.imul(_,tt)|0,r=r+Math.imul(y,it)|0,n=(n=n+Math.imul(y,rt)|0)+Math.imul(w,it)|0,s=s+Math.imul(w,rt)|0,r=r+Math.imul(m,st)|0,n=(n=n+Math.imul(m,ot)|0)+Math.imul(p,st)|0,s=s+Math.imul(p,ot)|0;var xt=(a+(r=r+Math.imul(c,ut)|0)|0)+((8191&(n=(n=n+Math.imul(c,at)|0)+Math.imul(f,ut)|0))<<13)|0;a=((s=s+Math.imul(f,at)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(j,U),n=(n=Math.imul(j,q))+Math.imul(D,U)|0,s=Math.imul(D,q),r=r+Math.imul(R,Z)|0,n=(n=n+Math.imul(R,G)|0)+Math.imul(I,Z)|0,s=s+Math.imul(I,G)|0,r=r+Math.imul(k,V)|0,n=(n=n+Math.imul(k,Y)|0)+Math.imul(C,V)|0,s=s+Math.imul(C,Y)|0,r=r+Math.imul(N,K)|0,n=(n=n+Math.imul(N,$)|0)+Math.imul(O,K)|0,s=s+Math.imul(O,$)|0,r=r+Math.imul(x,Q)|0,n=(n=n+Math.imul(x,tt)|0)+Math.imul(A,Q)|0,s=s+Math.imul(A,tt)|0,r=r+Math.imul(b,it)|0,n=(n=n+Math.imul(b,rt)|0)+Math.imul(_,it)|0,s=s+Math.imul(_,rt)|0,r=r+Math.imul(y,st)|0,n=(n=n+Math.imul(y,ot)|0)+Math.imul(w,st)|0,s=s+Math.imul(w,ot)|0,r=r+Math.imul(m,ut)|0,n=(n=n+Math.imul(m,at)|0)+Math.imul(p,ut)|0,s=s+Math.imul(p,at)|0;var At=(a+(r=r+Math.imul(c,ct)|0)|0)+((8191&(n=(n=n+Math.imul(c,ft)|0)+Math.imul(f,ct)|0))<<13)|0;a=((s=s+Math.imul(f,ft)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(z,U),n=(n=Math.imul(z,q))+Math.imul(P,U)|0,s=Math.imul(P,q),r=r+Math.imul(j,Z)|0,n=(n=n+Math.imul(j,G)|0)+Math.imul(D,Z)|0,s=s+Math.imul(D,G)|0,r=r+Math.imul(R,V)|0,n=(n=n+Math.imul(R,Y)|0)+Math.imul(I,V)|0,s=s+Math.imul(I,Y)|0,r=r+Math.imul(k,K)|0,n=(n=n+Math.imul(k,$)|0)+Math.imul(C,K)|0,s=s+Math.imul(C,$)|0,r=r+Math.imul(N,Q)|0,n=(n=n+Math.imul(N,tt)|0)+Math.imul(O,Q)|0,s=s+Math.imul(O,tt)|0,r=r+Math.imul(x,it)|0,n=(n=n+Math.imul(x,rt)|0)+Math.imul(A,it)|0,s=s+Math.imul(A,rt)|0,r=r+Math.imul(b,st)|0,n=(n=n+Math.imul(b,ot)|0)+Math.imul(_,st)|0,s=s+Math.imul(_,ot)|0,r=r+Math.imul(y,ut)|0,n=(n=n+Math.imul(y,at)|0)+Math.imul(w,ut)|0,s=s+Math.imul(w,at)|0,r=r+Math.imul(m,ct)|0,n=(n=n+Math.imul(m,ft)|0)+Math.imul(p,ct)|0,s=s+Math.imul(p,ft)|0;var Et=(a+(r=r+Math.imul(c,mt)|0)|0)+((8191&(n=(n=n+Math.imul(c,pt)|0)+Math.imul(f,mt)|0))<<13)|0;a=((s=s+Math.imul(f,pt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(z,Z),n=(n=Math.imul(z,G))+Math.imul(P,Z)|0,s=Math.imul(P,G),r=r+Math.imul(j,V)|0,n=(n=n+Math.imul(j,Y)|0)+Math.imul(D,V)|0,s=s+Math.imul(D,Y)|0,r=r+Math.imul(R,K)|0,n=(n=n+Math.imul(R,$)|0)+Math.imul(I,K)|0,s=s+Math.imul(I,$)|0,r=r+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(C,Q)|0,s=s+Math.imul(C,tt)|0,r=r+Math.imul(N,it)|0,n=(n=n+Math.imul(N,rt)|0)+Math.imul(O,it)|0,s=s+Math.imul(O,rt)|0,r=r+Math.imul(x,st)|0,n=(n=n+Math.imul(x,ot)|0)+Math.imul(A,st)|0,s=s+Math.imul(A,ot)|0,r=r+Math.imul(b,ut)|0,n=(n=n+Math.imul(b,at)|0)+Math.imul(_,ut)|0,s=s+Math.imul(_,at)|0,r=r+Math.imul(y,ct)|0,n=(n=n+Math.imul(y,ft)|0)+Math.imul(w,ct)|0,s=s+Math.imul(w,ft)|0;var Nt=(a+(r=r+Math.imul(m,mt)|0)|0)+((8191&(n=(n=n+Math.imul(m,pt)|0)+Math.imul(p,mt)|0))<<13)|0;a=((s=s+Math.imul(p,pt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,r=Math.imul(z,V),n=(n=Math.imul(z,Y))+Math.imul(P,V)|0,s=Math.imul(P,Y),r=r+Math.imul(j,K)|0,n=(n=n+Math.imul(j,$)|0)+Math.imul(D,K)|0,s=s+Math.imul(D,$)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,s=s+Math.imul(I,tt)|0,r=r+Math.imul(k,it)|0,n=(n=n+Math.imul(k,rt)|0)+Math.imul(C,it)|0,s=s+Math.imul(C,rt)|0,r=r+Math.imul(N,st)|0,n=(n=n+Math.imul(N,ot)|0)+Math.imul(O,st)|0,s=s+Math.imul(O,ot)|0,r=r+Math.imul(x,ut)|0,n=(n=n+Math.imul(x,at)|0)+Math.imul(A,ut)|0,s=s+Math.imul(A,at)|0,r=r+Math.imul(b,ct)|0,n=(n=n+Math.imul(b,ft)|0)+Math.imul(_,ct)|0,s=s+Math.imul(_,ft)|0;var Ot=(a+(r=r+Math.imul(y,mt)|0)|0)+((8191&(n=(n=n+Math.imul(y,pt)|0)+Math.imul(w,mt)|0))<<13)|0;a=((s=s+Math.imul(w,pt)|0)+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,r=Math.imul(z,K),n=(n=Math.imul(z,$))+Math.imul(P,K)|0,s=Math.imul(P,$),r=r+Math.imul(j,Q)|0,n=(n=n+Math.imul(j,tt)|0)+Math.imul(D,Q)|0,s=s+Math.imul(D,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,s=s+Math.imul(I,rt)|0,r=r+Math.imul(k,st)|0,n=(n=n+Math.imul(k,ot)|0)+Math.imul(C,st)|0,s=s+Math.imul(C,ot)|0,r=r+Math.imul(N,ut)|0,n=(n=n+Math.imul(N,at)|0)+Math.imul(O,ut)|0,s=s+Math.imul(O,at)|0,r=r+Math.imul(x,ct)|0,n=(n=n+Math.imul(x,ft)|0)+Math.imul(A,ct)|0,s=s+Math.imul(A,ft)|0;var St=(a+(r=r+Math.imul(b,mt)|0)|0)+((8191&(n=(n=n+Math.imul(b,pt)|0)+Math.imul(_,mt)|0))<<13)|0;a=((s=s+Math.imul(_,pt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(z,Q),n=(n=Math.imul(z,tt))+Math.imul(P,Q)|0,s=Math.imul(P,tt),r=r+Math.imul(j,it)|0,n=(n=n+Math.imul(j,rt)|0)+Math.imul(D,it)|0,s=s+Math.imul(D,rt)|0,r=r+Math.imul(R,st)|0,n=(n=n+Math.imul(R,ot)|0)+Math.imul(I,st)|0,s=s+Math.imul(I,ot)|0,r=r+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(C,ut)|0,s=s+Math.imul(C,at)|0,r=r+Math.imul(N,ct)|0,n=(n=n+Math.imul(N,ft)|0)+Math.imul(O,ct)|0,s=s+Math.imul(O,ft)|0;var kt=(a+(r=r+Math.imul(x,mt)|0)|0)+((8191&(n=(n=n+Math.imul(x,pt)|0)+Math.imul(A,mt)|0))<<13)|0;a=((s=s+Math.imul(A,pt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(z,it),n=(n=Math.imul(z,rt))+Math.imul(P,it)|0,s=Math.imul(P,rt),r=r+Math.imul(j,st)|0,n=(n=n+Math.imul(j,ot)|0)+Math.imul(D,st)|0,s=s+Math.imul(D,ot)|0,r=r+Math.imul(R,ut)|0,n=(n=n+Math.imul(R,at)|0)+Math.imul(I,ut)|0,s=s+Math.imul(I,at)|0,r=r+Math.imul(k,ct)|0,n=(n=n+Math.imul(k,ft)|0)+Math.imul(C,ct)|0,s=s+Math.imul(C,ft)|0;var Ct=(a+(r=r+Math.imul(N,mt)|0)|0)+((8191&(n=(n=n+Math.imul(N,pt)|0)+Math.imul(O,mt)|0))<<13)|0;a=((s=s+Math.imul(O,pt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(z,st),n=(n=Math.imul(z,ot))+Math.imul(P,st)|0,s=Math.imul(P,ot),r=r+Math.imul(j,ut)|0,n=(n=n+Math.imul(j,at)|0)+Math.imul(D,ut)|0,s=s+Math.imul(D,at)|0,r=r+Math.imul(R,ct)|0,n=(n=n+Math.imul(R,ft)|0)+Math.imul(I,ct)|0,s=s+Math.imul(I,ft)|0;var Tt=(a+(r=r+Math.imul(k,mt)|0)|0)+((8191&(n=(n=n+Math.imul(k,pt)|0)+Math.imul(C,mt)|0))<<13)|0;a=((s=s+Math.imul(C,pt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(z,ut),n=(n=Math.imul(z,at))+Math.imul(P,ut)|0,s=Math.imul(P,at),r=r+Math.imul(j,ct)|0,n=(n=n+Math.imul(j,ft)|0)+Math.imul(D,ct)|0,s=s+Math.imul(D,ft)|0;var Rt=(a+(r=r+Math.imul(R,mt)|0)|0)+((8191&(n=(n=n+Math.imul(R,pt)|0)+Math.imul(I,mt)|0))<<13)|0;a=((s=s+Math.imul(I,pt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(z,ct),n=(n=Math.imul(z,ft))+Math.imul(P,ct)|0,s=Math.imul(P,ft);var It=(a+(r=r+Math.imul(j,mt)|0)|0)+((8191&(n=(n=n+Math.imul(j,pt)|0)+Math.imul(D,mt)|0))<<13)|0;a=((s=s+Math.imul(D,pt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863;var Lt=(a+(r=Math.imul(z,mt))|0)+((8191&(n=(n=Math.imul(z,pt))+Math.imul(P,mt)|0))<<13)|0;return a=((s=Math.imul(P,pt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,u[0]=gt,u[1]=yt,u[2]=wt,u[3]=vt,u[4]=bt,u[5]=_t,u[6]=Mt,u[7]=xt,u[8]=At,u[9]=Et,u[10]=Nt,u[11]=Ot,u[12]=St,u[13]=kt,u[14]=Ct,u[15]=Tt,u[16]=Rt,u[17]=It,u[18]=Lt,0!==a&&(u[19]=a,i.length++),i};function p(t,e,i){return(new g).mulp(t,e,i)}function g(t,e){this.x=t,this.y=e}Math.imul||(m=d),s.prototype.mulTo=function(t,e){var i,r=this.length+t.length;return i=10===this.length&&10===t.length?m(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,s=0;s<i.length-1;s++){var o=n;n=0;for(var h=67108863&r,u=Math.min(s,e.length-1),a=Math.max(0,s-t.length+1);a<=u;a++){var l=s-a,c=(0|t.words[l])*(0|e.words[a]),f=67108863&c;h=67108863&(f=f+h|0),n+=(o=(o=o+(c/67108864|0)|0)+(f>>>26)|0)>>>26,o&=67108863}i.words[s]=h,r=o,o=n}return 0!==r?i.words[s]=r:i.length--,i.strip()}(this,t,e):p(this,t,e),i},g.prototype.makeRBT=function(t){for(var e=new Array(t),i=s.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},g.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},g.prototype.permute=function(t,e,i,r,n,s){for(var o=0;o<s;o++)r[o]=e[t[o]],n[o]=i[t[o]]},g.prototype.transform=function(t,e,i,r,n,s){this.permute(s,t,e,i,r,n);for(var o=1;o<n;o<<=1)for(var h=o<<1,u=Math.cos(2*Math.PI/h),a=Math.sin(2*Math.PI/h),l=0;l<n;l+=h)for(var c=u,f=a,d=0;d<o;d++){var m=i[l+d],p=r[l+d],g=i[l+d+o],y=r[l+d+o],w=c*g-f*y;y=c*y+f*g,g=w,i[l+d]=m+g,r[l+d]=p+y,i[l+d+o]=m-g,r[l+d+o]=p-y,d!==h&&(w=u*c-a*f,f=u*f+a*c,c=w)}},g.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},g.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},g.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},g.prototype.convert13b=function(t,e,i,n){for(var s=0,o=0;o<e;o++)s+=0|t[o],i[2*o]=8191&s,s>>>=13,i[2*o+1]=8191&s,s>>>=13;for(o=2*e;o<n;++o)i[o]=0;r(0===s),r(0==(-8192&s))},g.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},g.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),s=this.stub(r),o=new Array(r),h=new Array(r),u=new Array(r),a=new Array(r),l=new Array(r),c=new Array(r),f=i.words;f.length=r,this.convert13b(t.words,t.length,o,r),this.convert13b(e.words,e.length,a,r),this.transform(o,s,h,u,r,n),this.transform(a,s,l,c,r,n);for(var d=0;d<r;d++){var m=h[d]*l[d]-u[d]*c[d];u[d]=h[d]*c[d]+u[d]*l[d],h[d]=m}return this.conjugate(h,u,r),this.transform(h,u,f,s,r,n),this.conjugate(f,s,r),this.normalize13b(f,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},s.prototype.mul=function(t){var e=new s(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},s.prototype.mulf=function(t){var e=new s(null);return e.words=new Array(this.length+t.length),p(this,t,e)},s.prototype.imul=function(t){return this.clone().mulTo(t,this)},s.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,s=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=s>>>26,this.words[i]=67108863&s}return 0!==e&&(this.words[i]=e,this.length++),this},s.prototype.muln=function(t){return this.clone().imuln(t)},s.prototype.sqr=function(){return this.mul(this)},s.prototype.isqr=function(){return this.imul(this.clone())},s.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new s(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},s.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,s=67108863>>>26-i<<26-i;if(0!==i){var o=0;for(e=0;e<this.length;e++){var h=this.words[e]&s,u=(0|this.words[e])-h<<i;this.words[e]=u|o,o=h>>>26-i}o&&(this.words[e]=o,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},s.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},s.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var s=t%26,o=Math.min((t-s)/26,this.length),h=67108863^67108863>>>s<<s,u=i;if(n-=o,n=Math.max(0,n),u){for(var a=0;a<o;a++)u.words[a]=this.words[a];u.length=o}if(0===o);else if(this.length>o)for(this.length-=o,a=0;a<this.length;a++)this.words[a]=this.words[a+o];else this.words[0]=0,this.length=1;var l=0;for(a=this.length-1;a>=0&&(0!==l||a>=n);a--){var c=0|this.words[a];this.words[a]=l<<26-s|c>>>s,l=c&h}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},s.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},s.prototype.shln=function(t){return this.clone().ishln(t)},s.prototype.ushln=function(t){return this.clone().iushln(t)},s.prototype.shrn=function(t){return this.clone().ishrn(t)},s.prototype.ushrn=function(t){return this.clone().iushrn(t)},s.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},s.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},s.prototype.maskn=function(t){return this.clone().imaskn(t)},s.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},s.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},s.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},s.prototype.addn=function(t){return this.clone().iaddn(t)},s.prototype.subn=function(t){return this.clone().isubn(t)},s.prototype.iabs=function(){return this.negative=0,this},s.prototype.abs=function(){return this.clone().iabs()},s.prototype._ishlnsubmul=function(t,e,i){var n,s,o=t.length+i;this._expand(o);var h=0;for(n=0;n<t.length;n++){s=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((s-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&s}for(;n<this.length-i;n++)h=(s=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&s;if(0===h)return this.strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(s=-(0|this.words[n])+h)>>26,this.words[n]=67108863&s;return this.negative=1,this.strip()},s.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,o=0|n.words[n.length-1];0!=(i=26-this._countBits(o))&&(n=n.ushln(i),r.iushln(i),o=0|n.words[n.length-1]);var h,u=r.length-n.length;if("mod"!==e){(h=new s(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var l=r.clone()._ishlnsubmul(n,1,u);0===l.negative&&(r=l,h&&(h.words[u]=1));for(var c=u-1;c>=0;c--){var f=67108864*(0|r.words[n.length+c])+(0|r.words[n.length+c-1]);for(f=Math.min(f/o|0,67108863),r._ishlnsubmul(n,f,c);0!==r.negative;)f--,r.negative=0,r._ishlnsubmul(n,1,c),r.isZero()||(r.negative^=1);h&&(h.words[c]=f)}return h&&h.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:h||null,mod:r}},s.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new s(0),mod:new s(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(n=h.div.neg()),"div"!==e&&(o=h.mod.neg(),i&&0!==o.negative&&o.iadd(t)),{div:n,mod:o}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(n=h.div.neg()),{div:n,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(o=h.mod.neg(),i&&0!==o.negative&&o.isub(t)),{div:h.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new s(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new s(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new s(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,o,h},s.prototype.div=function(t){return this.divmod(t,"div",!1).div},s.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},s.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},s.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),s=i.cmp(r);return s<0||1===n&&0===s?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},s.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},s.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},s.prototype.divn=function(t){return this.clone().idivn(t)},s.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new s(1),o=new s(0),h=new s(0),u=new s(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var l=i.clone(),c=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(n.isOdd()||o.isOdd())&&(n.iadd(l),o.isub(c)),n.iushrn(1),o.iushrn(1);for(var m=0,p=1;0==(i.words[0]&p)&&m<26;++m,p<<=1);if(m>0)for(i.iushrn(m);m-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(l),u.isub(c)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(h),o.isub(u)):(i.isub(e),h.isub(n),u.isub(o))}return{a:h,b:u,gcd:i.iushln(a)}},s.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,o=new s(1),h=new s(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,l=1;0==(e.words[0]&l)&&a<26;++a,l<<=1);if(a>0)for(e.iushrn(a);a-- >0;)o.isOdd()&&o.iadd(u),o.iushrn(1);for(var c=0,f=1;0==(i.words[0]&f)&&c<26;++c,f<<=1);if(c>0)for(i.iushrn(c);c-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h)):(i.isub(e),h.isub(o))}return(n=0===e.cmpn(1)?o:h).cmpn(0)<0&&n.iadd(t),n},s.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var s=e;e=i,i=s}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},s.prototype.invm=function(t){return this.egcd(t).a.umod(t)},s.prototype.isEven=function(){return 0==(1&this.words[0])},s.prototype.isOdd=function(){return 1==(1&this.words[0])},s.prototype.andln=function(t){return this.words[0]&t},s.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var s=n,o=i;0!==s&&o<this.length;o++){var h=0|this.words[o];s=(h+=s)>>>26,h&=67108863,this.words[o]=h}return 0!==s&&(this.words[o]=s,this.length++),this},s.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},s.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},s.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},s.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},s.prototype.gtn=function(t){return 1===this.cmpn(t)},s.prototype.gt=function(t){return 1===this.cmp(t)},s.prototype.gten=function(t){return this.cmpn(t)>=0},s.prototype.gte=function(t){return this.cmp(t)>=0},s.prototype.ltn=function(t){return-1===this.cmpn(t)},s.prototype.lt=function(t){return-1===this.cmp(t)},s.prototype.lten=function(t){return this.cmpn(t)<=0},s.prototype.lte=function(t){return this.cmp(t)<=0},s.prototype.eqn=function(t){return 0===this.cmpn(t)},s.prototype.eq=function(t){return 0===this.cmp(t)},s.red=function(t){return new x(t)},s.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},s.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},s.prototype._forceRed=function(t){return this.red=t,this},s.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},s.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},s.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},s.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},s.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},s.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},s.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},s.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},s.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},s.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},s.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},s.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},s.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},s.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var y={k256:null,p224:null,p192:null,p25519:null};function w(t,e){this.name=t,this.p=new s(e,16),this.n=this.p.bitLength(),this.k=new s(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){w.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){w.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){w.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){w.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var e=s._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new s(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}w.prototype._tmp=function(){var t=new s(null);return t.words=new Array(Math.ceil(this.n/13)),t},w.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},w.prototype.split=function(t,e){t.iushrn(this.n,0,e)},w.prototype.imulK=function(t){return t.imul(this.k)},n(v,w),v.prototype.split=function(t,e){for(var i=4194303,r=Math.min(t.length,9),n=0;n<r;n++)e.words[n]=t.words[n];if(e.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var s=t.words[9];for(e.words[e.length++]=s&i,n=10;n<t.length;n++){var o=0|t.words[n];t.words[n-10]=(o&i)<<4|s>>>22,s=o}s>>>=22,t.words[n-10]=s,0===s&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(b,w),n(_,w),n(M,w),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},s._prime=function(t){if(y[t])return y[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new _;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return y[t]=e,e},x.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},x.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},x.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},x.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},x.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},x.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},x.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new s(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),o=0;!n.isZero()&&0===n.andln(1);)o++,n.iushrn(1);r(!n.isZero());var h=new s(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new s(2*l*l).toRed(this);0!==this.pow(l,a).cmp(u);)l.redIAdd(u);for(var c=this.pow(l,n),f=this.pow(t,n.addn(1).iushrn(1)),d=this.pow(t,n),m=o;0!==d.cmp(h);){for(var p=d,g=0;0!==p.cmp(h);g++)p=p.redSqr();r(g<m);var y=this.pow(c,new s(1).iushln(m-g-1));f=f.redMul(y),c=y.redSqr(),d=d.redMul(c),m=g}return f},x.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},x.prototype.pow=function(t,e){if(e.isZero())return new s(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new s(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],o=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),r=e.length-1;r>=0;r--){for(var a=e.words[r],l=u-1;l>=0;l--){var c=a>>l&1;n!==i[0]&&(n=this.sqr(n)),0!==c||0!==o?(o<<=1,o|=c,(4==++h||0===r&&0===l)&&(n=this.mul(n,i[o]),h=0,o=0)):h=0}u=26}return n},x.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},x.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},s.mont=function(t){return new A(t)},n(A,x),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),s=n;return n.cmp(this.m)>=0?s=n.isub(this.m):n.cmpn(0)<0&&(s=n.iadd(this.m)),s._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new s(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=i.nmd(t),this)},94:(t,e,i)=>{var r;!function(){"use strict";var n="input is invalid type",s="object"==typeof window,o=s?window:{};o.JS_SHA3_NO_WINDOW&&(s=!1);var h=!s&&"object"==typeof self;!o.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?o=i.g:h&&(o=self);var u=!o.JS_SHA3_NO_COMMON_JS&&t.exports,a=i.amdO,l=!o.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),f=[4,1024,262144,67108864],d=[0,8,16,24],m=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],p=[224,256,384,512],g=[128,256],y=["hex","buffer","arrayBuffer","array","digest"],w={128:168,256:136};!o.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!l||!o.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var v=function(t,e,i){return function(r){return new L(t,e,t).update(r)[i]()}},b=function(t,e,i){return function(r,n){return new L(t,e,n).update(r)[i]()}},_=function(t,e,i){return function(e,r,n,s){return N["cshake"+t].update(e,r,n,s)[i]()}},M=function(t,e,i){return function(e,r,n,s){return N["kmac"+t].update(e,r,n,s)[i]()}},x=function(t,e,i,r){for(var n=0;n<y.length;++n){var s=y[n];t[s]=e(i,r,s)}return t},A=function(t,e){var i=v(t,e,"hex");return i.create=function(){return new L(t,e,t)},i.update=function(t){return i.create().update(t)},x(i,v,t,e)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:p,createMethod:A},{name:"sha3",padding:[6,1536,393216,100663296],bits:p,createMethod:A},{name:"shake",padding:[31,7936,2031616,520093696],bits:g,createMethod:function(t,e){var i=b(t,e,"hex");return i.create=function(i){return new L(t,e,i)},i.update=function(t,e){return i.create(e).update(t)},x(i,b,t,e)}},{name:"cshake",padding:f,bits:g,createMethod:function(t,e){var i=w[t],r=_(t,0,"hex");return r.create=function(r,n,s){return n||s?new L(t,e,r).bytepad([n,s],i):N["shake"+t].create(r)},r.update=function(t,e,i,n){return r.create(e,i,n).update(t)},x(r,_,t,e)}},{name:"kmac",padding:f,bits:g,createMethod:function(t,e){var i=w[t],r=M(t,0,"hex");return r.create=function(r,n,s){return new j(t,e,n).bytepad(["KMAC",s],i).bytepad([r],i)},r.update=function(t,e,i,n){return r.create(t,i,n).update(e)},x(r,M,t,e)}}],N={},O=[],S=0;S<E.length;++S)for(var k=E[S],C=k.bits,T=0;T<C.length;++T){var R=k.name+"_"+C[T];if(O.push(R),N[R]=k.createMethod(C[T],k.padding),"sha3"!==k.name){var I=k.name+C[T];O.push(I),N[I]=N[R]}}function L(t,e,i){this.blocks=[],this.s=[],this.padding=e,this.outputBits=i,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=i>>5,this.extraBytes=(31&i)>>3;for(var r=0;r<50;++r)this.s[r]=0}function j(t,e,i){L.call(this,t,e,i)}L.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var e,i=typeof t;if("string"!==i){if("object"!==i)throw new Error(n);if(null===t)throw new Error(n);if(l&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||l&&ArrayBuffer.isView(t)))throw new Error(n);e=!0}for(var r,s,o=this.blocks,h=this.byteCount,u=t.length,a=this.blockCount,c=0,f=this.s;c<u;){if(this.reset)for(this.reset=!1,o[0]=this.block,r=1;r<a+1;++r)o[r]=0;if(e)for(r=this.start;c<u&&r<h;++c)o[r>>2]|=t[c]<<d[3&r++];else for(r=this.start;c<u&&r<h;++c)(s=t.charCodeAt(c))<128?o[r>>2]|=s<<d[3&r++]:s<2048?(o[r>>2]|=(192|s>>6)<<d[3&r++],o[r>>2]|=(128|63&s)<<d[3&r++]):s<55296||s>=57344?(o[r>>2]|=(224|s>>12)<<d[3&r++],o[r>>2]|=(128|s>>6&63)<<d[3&r++],o[r>>2]|=(128|63&s)<<d[3&r++]):(s=65536+((1023&s)<<10|1023&t.charCodeAt(++c)),o[r>>2]|=(240|s>>18)<<d[3&r++],o[r>>2]|=(128|s>>12&63)<<d[3&r++],o[r>>2]|=(128|s>>6&63)<<d[3&r++],o[r>>2]|=(128|63&s)<<d[3&r++]);if(this.lastByteIndex=r,r>=h){for(this.start=r-h,this.block=o[a],r=0;r<a;++r)f[r]^=o[r];D(f),this.reset=!0}else this.start=r}return this},L.prototype.encode=function(t,e){var i=255&t,r=1,n=[i];for(i=255&(t>>=8);i>0;)n.unshift(i),i=255&(t>>=8),++r;return e?n.push(r):n.unshift(r),this.update(n),n.length},L.prototype.encodeString=function(t){var e,i=typeof t;if("string"!==i){if("object"!==i)throw new Error(n);if(null===t)throw new Error(n);if(l&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||l&&ArrayBuffer.isView(t)))throw new Error(n);e=!0}var r=0,s=t.length;if(e)r=s;else for(var o=0;o<t.length;++o){var h=t.charCodeAt(o);h<128?r+=1:h<2048?r+=2:h<55296||h>=57344?r+=3:(h=65536+((1023&h)<<10|1023&t.charCodeAt(++o)),r+=4)}return r+=this.encode(8*r),this.update(t),r},L.prototype.bytepad=function(t,e){for(var i=this.encode(e),r=0;r<t.length;++r)i+=this.encodeString(t[r]);var n=e-i%e,s=[];return s.length=n,this.update(s),this},L.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,i=this.blockCount,r=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[i],e=1;e<i+1;++e)t[e]=0;for(t[i-1]|=2147483648,e=0;e<i;++e)r[e]^=t[e];D(r)}},L.prototype.toString=L.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,i=this.s,r=this.outputBlocks,n=this.extraBytes,s=0,o=0,h="";o<r;){for(s=0;s<e&&o<r;++s,++o)t=i[s],h+=c[t>>4&15]+c[15&t]+c[t>>12&15]+c[t>>8&15]+c[t>>20&15]+c[t>>16&15]+c[t>>28&15]+c[t>>24&15];o%e==0&&(D(i),s=0)}return n&&(t=i[s],h+=c[t>>4&15]+c[15&t],n>1&&(h+=c[t>>12&15]+c[t>>8&15]),n>2&&(h+=c[t>>20&15]+c[t>>16&15])),h},L.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,i=this.s,r=this.outputBlocks,n=this.extraBytes,s=0,o=0,h=this.outputBits>>3;t=n?new ArrayBuffer(r+1<<2):new ArrayBuffer(h);for(var u=new Uint32Array(t);o<r;){for(s=0;s<e&&o<r;++s,++o)u[o]=i[s];o%e==0&&D(i)}return n&&(u[s]=i[s],t=t.slice(0,h)),t},L.prototype.buffer=L.prototype.arrayBuffer,L.prototype.digest=L.prototype.array=function(){this.finalize();for(var t,e,i=this.blockCount,r=this.s,n=this.outputBlocks,s=this.extraBytes,o=0,h=0,u=[];h<n;){for(o=0;o<i&&h<n;++o,++h)t=h<<2,e=r[o],u[t]=255&e,u[t+1]=e>>8&255,u[t+2]=e>>16&255,u[t+3]=e>>24&255;h%i==0&&D(r)}return s&&(t=h<<2,e=r[o],u[t]=255&e,s>1&&(u[t+1]=e>>8&255),s>2&&(u[t+2]=e>>16&255)),u},j.prototype=new L,j.prototype.finalize=function(){return this.encode(this.outputBits,!0),L.prototype.finalize.call(this)};var D=function(t){var e,i,r,n,s,o,h,u,a,l,c,f,d,p,g,y,w,v,b,_,M,x,A,E,N,O,S,k,C,T,R,I,L,j,D,B,z,P,F,U,q,H,Z,G,X,V,Y,W,K,$,J,Q,tt,et,it,rt,nt,st,ot,ht,ut,at,lt;for(r=0;r<48;r+=2)n=t[0]^t[10]^t[20]^t[30]^t[40],s=t[1]^t[11]^t[21]^t[31]^t[41],o=t[2]^t[12]^t[22]^t[32]^t[42],h=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],a=t[5]^t[15]^t[25]^t[35]^t[45],l=t[6]^t[16]^t[26]^t[36]^t[46],c=t[7]^t[17]^t[27]^t[37]^t[47],e=(f=t[8]^t[18]^t[28]^t[38]^t[48])^(o<<1|h>>>31),i=(d=t[9]^t[19]^t[29]^t[39]^t[49])^(h<<1|o>>>31),t[0]^=e,t[1]^=i,t[10]^=e,t[11]^=i,t[20]^=e,t[21]^=i,t[30]^=e,t[31]^=i,t[40]^=e,t[41]^=i,e=n^(u<<1|a>>>31),i=s^(a<<1|u>>>31),t[2]^=e,t[3]^=i,t[12]^=e,t[13]^=i,t[22]^=e,t[23]^=i,t[32]^=e,t[33]^=i,t[42]^=e,t[43]^=i,e=o^(l<<1|c>>>31),i=h^(c<<1|l>>>31),t[4]^=e,t[5]^=i,t[14]^=e,t[15]^=i,t[24]^=e,t[25]^=i,t[34]^=e,t[35]^=i,t[44]^=e,t[45]^=i,e=u^(f<<1|d>>>31),i=a^(d<<1|f>>>31),t[6]^=e,t[7]^=i,t[16]^=e,t[17]^=i,t[26]^=e,t[27]^=i,t[36]^=e,t[37]^=i,t[46]^=e,t[47]^=i,e=l^(n<<1|s>>>31),i=c^(s<<1|n>>>31),t[8]^=e,t[9]^=i,t[18]^=e,t[19]^=i,t[28]^=e,t[29]^=i,t[38]^=e,t[39]^=i,t[48]^=e,t[49]^=i,p=t[0],g=t[1],V=t[11]<<4|t[10]>>>28,Y=t[10]<<4|t[11]>>>28,k=t[20]<<3|t[21]>>>29,C=t[21]<<3|t[20]>>>29,ht=t[31]<<9|t[30]>>>23,ut=t[30]<<9|t[31]>>>23,H=t[40]<<18|t[41]>>>14,Z=t[41]<<18|t[40]>>>14,j=t[2]<<1|t[3]>>>31,D=t[3]<<1|t[2]>>>31,y=t[13]<<12|t[12]>>>20,w=t[12]<<12|t[13]>>>20,W=t[22]<<10|t[23]>>>22,K=t[23]<<10|t[22]>>>22,T=t[33]<<13|t[32]>>>19,R=t[32]<<13|t[33]>>>19,at=t[42]<<2|t[43]>>>30,lt=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,it=t[4]<<30|t[5]>>>2,B=t[14]<<6|t[15]>>>26,z=t[15]<<6|t[14]>>>26,v=t[25]<<11|t[24]>>>21,b=t[24]<<11|t[25]>>>21,$=t[34]<<15|t[35]>>>17,J=t[35]<<15|t[34]>>>17,I=t[45]<<29|t[44]>>>3,L=t[44]<<29|t[45]>>>3,E=t[6]<<28|t[7]>>>4,N=t[7]<<28|t[6]>>>4,rt=t[17]<<23|t[16]>>>9,nt=t[16]<<23|t[17]>>>9,P=t[26]<<25|t[27]>>>7,F=t[27]<<25|t[26]>>>7,_=t[36]<<21|t[37]>>>11,M=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,G=t[8]<<27|t[9]>>>5,X=t[9]<<27|t[8]>>>5,O=t[18]<<20|t[19]>>>12,S=t[19]<<20|t[18]>>>12,st=t[29]<<7|t[28]>>>25,ot=t[28]<<7|t[29]>>>25,U=t[38]<<8|t[39]>>>24,q=t[39]<<8|t[38]>>>24,x=t[48]<<14|t[49]>>>18,A=t[49]<<14|t[48]>>>18,t[0]=p^~y&v,t[1]=g^~w&b,t[10]=E^~O&k,t[11]=N^~S&C,t[20]=j^~B&P,t[21]=D^~z&F,t[30]=G^~V&W,t[31]=X^~Y&K,t[40]=et^~rt&st,t[41]=it^~nt&ot,t[2]=y^~v&_,t[3]=w^~b&M,t[12]=O^~k&T,t[13]=S^~C&R,t[22]=B^~P&U,t[23]=z^~F&q,t[32]=V^~W&$,t[33]=Y^~K&J,t[42]=rt^~st&ht,t[43]=nt^~ot&ut,t[4]=v^~_&x,t[5]=b^~M&A,t[14]=k^~T&I,t[15]=C^~R&L,t[24]=P^~U&H,t[25]=F^~q&Z,t[34]=W^~$&Q,t[35]=K^~J&tt,t[44]=st^~ht&at,t[45]=ot^~ut&lt,t[6]=_^~x&p,t[7]=M^~A&g,t[16]=T^~I&E,t[17]=R^~L&N,t[26]=U^~H&j,t[27]=q^~Z&D,t[36]=$^~Q&G,t[37]=J^~tt&X,t[46]=ht^~at&et,t[47]=ut^~lt&it,t[8]=x^~p&y,t[9]=A^~g&w,t[18]=I^~E&O,t[19]=L^~N&S,t[28]=H^~j&B,t[29]=Z^~D&z,t[38]=Q^~G&V,t[39]=tt^~X&Y,t[48]=at^~et&rt,t[49]=lt^~it&nt,t[0]^=m[r],t[1]^=m[r+1]};if(u)t.exports=N;else{for(S=0;S<O.length;++S)o[O[S]]=N[O[S]];a&&(void 0===(r=function(){return N}.call(e,i,e,t))||(t.exports=r))}}()},601:()=>{}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";const t={},e=[];function r(e,i){if(Array.isArray(e))for(const t of e)r(t,i);else if("object"!=typeof e)s(Object.getOwnPropertyNames(i)),t[e]=Object.assign(t[e]||{},i);else for(const t in e)r(t,e[t])}function n(e){return t[e]||{}}function s(t){e.push(...t)}function o(t,e){let i;const r=t.length,n=[];for(i=0;i<r;i++)n.push(e(t[i]));return n}function h(t,e){let i;const r=t.length,n=[];for(i=0;i<r;i++)e(t[i])&&n.push(t[i]);return n}function u(t){return t%360*Math.PI/180}function a(t){return t.toLowerCase().replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))}function l(t){return t.charAt(0).toUpperCase()+t.slice(1)}function c(t,e,i,r){return null!=e&&null!=i||(r=r||t.bbox(),null==e?e=r.width/r.height*i:null==i&&(i=r.height/r.width*e)),{width:e,height:i}}function f(t,e){const i=t.origin;let r=null!=t.ox?t.ox:null!=t.originX?t.originX:"center",n=null!=t.oy?t.oy:null!=t.originY?t.originY:"center";null!=i&&([r,n]=Array.isArray(i)?i:"object"==typeof i?[i.x,i.y]:[i,i]);const s="string"==typeof r,o="string"==typeof n;if(s||o){const{height:t,width:i,x:h,y:u}=e.bbox();s&&(r=r.includes("left")?h:r.includes("right")?h+i:h+i/2),o&&(n=n.includes("top")?u:n.includes("bottom")?u+t:u+t/2)}return[r,n]}const d="http://www.w3.org/2000/svg",m="http://www.w3.org/2000/xmlns/",p="http://www.w3.org/1999/xlink",g={window:"undefined"==typeof window?null:window,document:"undefined"==typeof document?null:document};class y{}const w={},v="___SYMBOL___ROOT___";function b(t,e=d){return g.document.createElementNS(e,t)}function _(t,e=!1){if(t instanceof y)return t;if("object"==typeof t)return A(t);if(null==t)return new w[v];if("string"==typeof t&&"<"!==t.charAt(0))return A(g.document.querySelector(t));const i=e?g.document.createElement("div"):b("svg");return i.innerHTML=t,t=A(i.firstChild),i.removeChild(i.firstChild),t}function M(t,e){return e instanceof g.window.Node?e:b(t)}function x(t){if(!t)return null;if(t.instance instanceof y)return t.instance;if("#document-fragment"===t.nodeName)return new w.Fragment(t);let e=l(t.nodeName||"Dom");return"LinearGradient"===e||"RadialGradient"===e?e="Gradient":w[e]||(e="Dom"),new w[e](t)}let A=x;function E(t,e=t.name,i=!1){return w[e]=t,i&&(w[v]=t),s(Object.getOwnPropertyNames(t.prototype)),t}let N=1e3;function O(t){return"Svgjs"+l(t)+N++}function S(t){for(let e=t.children.length-1;e>=0;e--)S(t.children[e]);return t.id?(t.id=O(t.nodeName),t):t}function k(t,e){let i,r;for(r=(t=Array.isArray(t)?t:[t]).length-1;r>=0;r--)for(i in e)t[r].prototype[i]=e[i]}function C(t){return function(...e){const i=e[e.length-1];return!i||i.constructor!==Object||i instanceof Array?t.apply(this,e):t.apply(this,e.slice(0,-1)).attr(i)}}r("Dom",{siblings:function(){return this.parent().children()},position:function(){return this.parent().index(this)},next:function(){return this.siblings()[this.position()+1]},prev:function(){return this.siblings()[this.position()-1]},forward:function(){const t=this.position();return this.parent().add(this.remove(),t+1),this},backward:function(){const t=this.position();return this.parent().add(this.remove(),t?t-1:0),this},front:function(){return this.parent().add(this.remove()),this},back:function(){return this.parent().add(this.remove(),0),this},before:function(t){(t=_(t)).remove();const e=this.position();return this.parent().add(t,e),this},after:function(t){(t=_(t)).remove();const e=this.position();return this.parent().add(t,e+1),this},insertBefore:function(t){return(t=_(t)).before(this),this},insertAfter:function(t){return(t=_(t)).after(this),this}});const T=/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,R=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,I=/rgb\((\d+),(\d+),(\d+)\)/,L=/(#[a-z_][a-z0-9\-_]*)/i,j=/\)\s*,?\s*/,D=/\s/g,B=/^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i,z=/^rgb\(/,P=/^(\s+)?$/,F=/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,U=/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,q=/[\s,]+/,H=/[MLHVCSQTAZ]/i;function Z(t){const e=Math.round(t),i=Math.max(0,Math.min(255,e)).toString(16);return 1===i.length?"0"+i:i}function G(t,e){for(let i=e.length;i--;)if(null==t[e[i]])return!1;return!0}function X(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}r("Dom",{classes:function(){const t=this.attr("class");return null==t?[]:t.trim().split(q)},hasClass:function(t){return-1!==this.classes().indexOf(t)},addClass:function(t){if(!this.hasClass(t)){const e=this.classes();e.push(t),this.attr("class",e.join(" "))}return this},removeClass:function(t){return this.hasClass(t)&&this.attr("class",this.classes().filter((function(e){return e!==t})).join(" ")),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t)}}),r("Dom",{css:function(t,e){const i={};if(0===arguments.length)return this.node.style.cssText.split(/\s*;\s*/).filter((function(t){return!!t.length})).forEach((function(t){const e=t.split(/\s*:\s*/);i[e[0]]=e[1]})),i;if(arguments.length<2){if(Array.isArray(t)){for(const e of t){const t=a(e);i[t]=this.node.style[t]}return i}if("string"==typeof t)return this.node.style[a(t)];if("object"==typeof t)for(const e in t)this.node.style[a(e)]=null==t[e]||P.test(t[e])?"":t[e]}return 2===arguments.length&&(this.node.style[a(t)]=null==e||P.test(e)?"":e),this},show:function(){return this.css("display","")},hide:function(){return this.css("display","none")},visible:function(){return"none"!==this.css("display")}}),r("Dom",{data:function(t,e,i){if(null==t)return this.data(o(h(this.node.attributes,(t=>0===t.nodeName.indexOf("data-"))),(t=>t.nodeName.slice(5))));if(t instanceof Array){const e={};for(const i of t)e[i]=this.data(i);return e}if("object"==typeof t)for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch(e){return this.attr("data-"+t)}else this.attr("data-"+t,null===e?null:!0===i||"string"==typeof e||"number"==typeof e?e:JSON.stringify(e));return this}}),r("Dom",{remember:function(t,e){if("object"==typeof arguments[0])for(const e in t)this.remember(e,t[e]);else{if(1===arguments.length)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(0===arguments.length)this._memory={};else for(let t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory=this._memory||{}}});class V{constructor(...t){this.init(...t)}static isColor(t){return t&&(t instanceof V||this.isRgb(t)||this.test(t))}static isRgb(t){return t&&"number"==typeof t.r&&"number"==typeof t.g&&"number"==typeof t.b}static random(t="vibrant",e,i){const{random:r,round:n,sin:s,PI:o}=Math;if("vibrant"===t){const t=24*r()+57,e=38*r()+45,i=360*r();return new V(t,e,i,"lch")}if("sine"===t){const t=n(80*s(2*o*(e=null==e?r():e)/.5+.01)+150),i=n(50*s(2*o*e/.5+4.6)+200),h=n(100*s(2*o*e/.5+2.3)+150);return new V(t,i,h)}if("pastel"===t){const t=8*r()+86,e=17*r()+9,i=360*r();return new V(t,e,i,"lch")}if("dark"===t){const t=10+10*r(),e=50*r()+86,i=360*r();return new V(t,e,i,"lch")}if("rgb"===t){const t=255*r(),e=255*r(),i=255*r();return new V(t,e,i)}if("lab"===t){const t=100*r(),e=256*r()-128,i=256*r()-128;return new V(t,e,i,"lab")}if("grey"===t){const t=255*r();return new V(t,t,t)}throw new Error("Unsupported random color mode")}static test(t){return"string"==typeof t&&(B.test(t)||z.test(t))}cmyk(){const{_a:t,_b:e,_c:i}=this.rgb(),[r,n,s]=[t,e,i].map((t=>t/255)),o=Math.min(1-r,1-n,1-s);return 1===o?new V(0,0,0,1,"cmyk"):new V((1-r-o)/(1-o),(1-n-o)/(1-o),(1-s-o)/(1-o),o,"cmyk")}hsl(){const{_a:t,_b:e,_c:i}=this.rgb(),[r,n,s]=[t,e,i].map((t=>t/255)),o=Math.max(r,n,s),h=Math.min(r,n,s),u=(o+h)/2,a=o===h,l=o-h;return new V(360*(a?0:o===r?((n-s)/l+(n<s?6:0))/6:o===n?((s-r)/l+2)/6:o===s?((r-n)/l+4)/6:0),100*(a?0:u>.5?l/(2-o-h):l/(o+h)),100*u,"hsl")}init(t=0,e=0,i=0,r=0,n="rgb"){if(t=t||0,this.space)for(const t in this.space)delete this[this.space[t]];if("number"==typeof t)n="string"==typeof r?r:n,r="string"==typeof r?0:r,Object.assign(this,{_a:t,_b:e,_c:i,_d:r,space:n});else if(t instanceof Array)this.space=e||("string"==typeof t[3]?t[3]:t[4])||"rgb",Object.assign(this,{_a:t[0],_b:t[1],_c:t[2],_d:t[3]||0});else if(t instanceof Object){const i=function(t,e){const i=G(t,"rgb")?{_a:t.r,_b:t.g,_c:t.b,_d:0,space:"rgb"}:G(t,"xyz")?{_a:t.x,_b:t.y,_c:t.z,_d:0,space:"xyz"}:G(t,"hsl")?{_a:t.h,_b:t.s,_c:t.l,_d:0,space:"hsl"}:G(t,"lab")?{_a:t.l,_b:t.a,_c:t.b,_d:0,space:"lab"}:G(t,"lch")?{_a:t.l,_b:t.c,_c:t.h,_d:0,space:"lch"}:G(t,"cmyk")?{_a:t.c,_b:t.m,_c:t.y,_d:t.k,space:"cmyk"}:{_a:0,_b:0,_c:0,space:"rgb"};return i.space=e||i.space,i}(t,e);Object.assign(this,i)}else if("string"==typeof t)if(z.test(t)){const e=t.replace(D,""),[i,r,n]=I.exec(e).slice(1,4).map((t=>parseInt(t)));Object.assign(this,{_a:i,_b:r,_c:n,_d:0,space:"rgb"})}else{if(!B.test(t))throw Error("Unsupported string format, can't construct Color");{const e=t=>parseInt(t,16),[,i,r,n]=R.exec(function(t){return 4===t.length?["#",t.substring(1,2),t.substring(1,2),t.substring(2,3),t.substring(2,3),t.substring(3,4),t.substring(3,4)].join(""):t}(t)).map(e);Object.assign(this,{_a:i,_b:r,_c:n,_d:0,space:"rgb"})}}const{_a:s,_b:o,_c:h,_d:u}=this,a="rgb"===this.space?{r:s,g:o,b:h}:"xyz"===this.space?{x:s,y:o,z:h}:"hsl"===this.space?{h:s,s:o,l:h}:"lab"===this.space?{l:s,a:o,b:h}:"lch"===this.space?{l:s,c:o,h}:"cmyk"===this.space?{c:s,m:o,y:h,k:u}:{};Object.assign(this,a)}lab(){const{x:t,y:e,z:i}=this.xyz();return new V(116*e-16,500*(t-e),200*(e-i),"lab")}lch(){const{l:t,a:e,b:i}=this.lab(),r=Math.sqrt(e**2+i**2);let n=180*Math.atan2(i,e)/Math.PI;return n<0&&(n*=-1,n=360-n),new V(t,r,n,"lch")}rgb(){if("rgb"===this.space)return this;if("lab"===(t=this.space)||"xyz"===t||"lch"===t){let{x:t,y:e,z:i}=this;if("lab"===this.space||"lch"===this.space){let{l:r,a:n,b:s}=this;if("lch"===this.space){const{c:t,h:e}=this,i=Math.PI/180;n=t*Math.cos(i*e),s=t*Math.sin(i*e)}const o=(r+16)/116,h=n/500+o,u=o-s/200,a=16/116,l=.008856,c=7.787;t=.95047*(h**3>l?h**3:(h-a)/c),e=1*(o**3>l?o**3:(o-a)/c),i=1.08883*(u**3>l?u**3:(u-a)/c)}const r=3.2406*t+-1.5372*e+-.4986*i,n=-.9689*t+1.8758*e+.0415*i,s=.0557*t+-.204*e+1.057*i,o=Math.pow,h=.0031308,u=r>h?1.055*o(r,1/2.4)-.055:12.92*r,a=n>h?1.055*o(n,1/2.4)-.055:12.92*n,l=s>h?1.055*o(s,1/2.4)-.055:12.92*s;return new V(255*u,255*a,255*l)}if("hsl"===this.space){let{h:t,s:e,l:i}=this;if(t/=360,e/=100,i/=100,0===e)return i*=255,new V(i,i,i);const r=i<.5?i*(1+e):i+e-i*e,n=2*i-r,s=255*X(n,r,t+1/3),o=255*X(n,r,t),h=255*X(n,r,t-1/3);return new V(s,o,h)}if("cmyk"===this.space){const{c:t,m:e,y:i,k:r}=this,n=255*(1-Math.min(1,t*(1-r)+r)),s=255*(1-Math.min(1,e*(1-r)+r)),o=255*(1-Math.min(1,i*(1-r)+r));return new V(n,s,o)}return this;var t}toArray(){const{_a:t,_b:e,_c:i,_d:r,space:n}=this;return[t,e,i,r,n]}toHex(){const[t,e,i]=this._clamped().map(Z);return`#${t}${e}${i}`}toRgb(){const[t,e,i]=this._clamped();return`rgb(${t},${e},${i})`}toString(){return this.toHex()}xyz(){const{_a:t,_b:e,_c:i}=this.rgb(),[r,n,s]=[t,e,i].map((t=>t/255)),o=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,h=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92,u=s>.04045?Math.pow((s+.055)/1.055,2.4):s/12.92,a=(.4124*o+.3576*h+.1805*u)/.95047,l=(.2126*o+.7152*h+.0722*u)/1,c=(.0193*o+.1192*h+.9505*u)/1.08883,f=a>.008856?Math.pow(a,1/3):7.787*a+16/116,d=l>.008856?Math.pow(l,1/3):7.787*l+16/116,m=c>.008856?Math.pow(c,1/3):7.787*c+16/116;return new V(f,d,m,"xyz")}_clamped(){const{_a:t,_b:e,_c:i}=this.rgb(),{max:r,min:n,round:s}=Math;return[t,e,i].map((t=>r(0,n(s(t),255))))}}class Y{constructor(...t){this.init(...t)}clone(){return new Y(this)}init(t,e){const i=Array.isArray(t)?{x:t[0],y:t[1]}:"object"==typeof t?{x:t.x,y:t.y}:{x:t,y:e};return this.x=null==i.x?0:i.x,this.y=null==i.y?0:i.y,this}toArray(){return[this.x,this.y]}transform(t){return this.clone().transformO(t)}transformO(t){K.isMatrixLike(t)||(t=new K(t));const{x:e,y:i}=this;return this.x=t.a*e+t.c*i+t.e,this.y=t.b*e+t.d*i+t.f,this}}function W(t,e,i){return Math.abs(e-t)<(i||1e-6)}class K{constructor(...t){this.init(...t)}static formatTransforms(t){const e="both"===t.flip||!0===t.flip,i=t.flip&&(e||"x"===t.flip)?-1:1,r=t.flip&&(e||"y"===t.flip)?-1:1,n=t.skew&&t.skew.length?t.skew[0]:isFinite(t.skew)?t.skew:isFinite(t.skewX)?t.skewX:0,s=t.skew&&t.skew.length?t.skew[1]:isFinite(t.skew)?t.skew:isFinite(t.skewY)?t.skewY:0,o=t.scale&&t.scale.length?t.scale[0]*i:isFinite(t.scale)?t.scale*i:isFinite(t.scaleX)?t.scaleX*i:i,h=t.scale&&t.scale.length?t.scale[1]*r:isFinite(t.scale)?t.scale*r:isFinite(t.scaleY)?t.scaleY*r:r,u=t.shear||0,a=t.rotate||t.theta||0,l=new Y(t.origin||t.around||t.ox||t.originX,t.oy||t.originY),c=l.x,f=l.y,d=new Y(t.position||t.px||t.positionX||NaN,t.py||t.positionY||NaN),m=d.x,p=d.y,g=new Y(t.translate||t.tx||t.translateX,t.ty||t.translateY),y=g.x,w=g.y,v=new Y(t.relative||t.rx||t.relativeX,t.ry||t.relativeY);return{scaleX:o,scaleY:h,skewX:n,skewY:s,shear:u,theta:a,rx:v.x,ry:v.y,tx:y,ty:w,ox:c,oy:f,px:m,py:p}}static fromArray(t){return{a:t[0],b:t[1],c:t[2],d:t[3],e:t[4],f:t[5]}}static isMatrixLike(t){return null!=t.a||null!=t.b||null!=t.c||null!=t.d||null!=t.e||null!=t.f}static matrixMultiply(t,e,i){const r=t.a*e.a+t.c*e.b,n=t.b*e.a+t.d*e.b,s=t.a*e.c+t.c*e.d,o=t.b*e.c+t.d*e.d,h=t.e+t.a*e.e+t.c*e.f,u=t.f+t.b*e.e+t.d*e.f;return i.a=r,i.b=n,i.c=s,i.d=o,i.e=h,i.f=u,i}around(t,e,i){return this.clone().aroundO(t,e,i)}aroundO(t,e,i){const r=t||0,n=e||0;return this.translateO(-r,-n).lmultiplyO(i).translateO(r,n)}clone(){return new K(this)}decompose(t=0,e=0){const i=this.a,r=this.b,n=this.c,s=this.d,o=this.e,h=this.f,u=i*s-r*n,a=u>0?1:-1,l=a*Math.sqrt(i*i+r*r),c=Math.atan2(a*r,a*i),f=180/Math.PI*c,d=Math.cos(c),m=Math.sin(c),p=(i*n+r*s)/u,g=n*l/(p*i-r)||s*l/(p*r+i);return{scaleX:l,scaleY:g,shear:p,rotate:f,translateX:o-t+t*d*l+e*(p*d*l-m*g),translateY:h-e+t*m*l+e*(p*m*l+d*g),originX:t,originY:e,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}equals(t){if(t===this)return!0;const e=new K(t);return W(this.a,e.a)&&W(this.b,e.b)&&W(this.c,e.c)&&W(this.d,e.d)&&W(this.e,e.e)&&W(this.f,e.f)}flip(t,e){return this.clone().flipO(t,e)}flipO(t,e){return"x"===t?this.scaleO(-1,1,e,0):"y"===t?this.scaleO(1,-1,0,e):this.scaleO(-1,-1,t,e||t)}init(t){const e=K.fromArray([1,0,0,1,0,0]);return t=t instanceof bt?t.matrixify():"string"==typeof t?K.fromArray(t.split(q).map(parseFloat)):Array.isArray(t)?K.fromArray(t):"object"==typeof t&&K.isMatrixLike(t)?t:"object"==typeof t?(new K).transform(t):6===arguments.length?K.fromArray([].slice.call(arguments)):e,this.a=null!=t.a?t.a:e.a,this.b=null!=t.b?t.b:e.b,this.c=null!=t.c?t.c:e.c,this.d=null!=t.d?t.d:e.d,this.e=null!=t.e?t.e:e.e,this.f=null!=t.f?t.f:e.f,this}inverse(){return this.clone().inverseO()}inverseO(){const t=this.a,e=this.b,i=this.c,r=this.d,n=this.e,s=this.f,o=t*r-e*i;if(!o)throw new Error("Cannot invert "+this);const h=r/o,u=-e/o,a=-i/o,l=t/o,c=-(h*n+a*s),f=-(u*n+l*s);return this.a=h,this.b=u,this.c=a,this.d=l,this.e=c,this.f=f,this}lmultiply(t){return this.clone().lmultiplyO(t)}lmultiplyO(t){const e=t instanceof K?t:new K(t);return K.matrixMultiply(e,this,this)}multiply(t){return this.clone().multiplyO(t)}multiplyO(t){const e=t instanceof K?t:new K(t);return K.matrixMultiply(this,e,this)}rotate(t,e,i){return this.clone().rotateO(t,e,i)}rotateO(t,e=0,i=0){t=u(t);const r=Math.cos(t),n=Math.sin(t),{a:s,b:o,c:h,d:a,e:l,f:c}=this;return this.a=s*r-o*n,this.b=o*r+s*n,this.c=h*r-a*n,this.d=a*r+h*n,this.e=l*r-c*n+i*n-e*r+e,this.f=c*r+l*n-e*n-i*r+i,this}scale(t,e,i,r){return this.clone().scaleO(...arguments)}scaleO(t,e=t,i=0,r=0){3===arguments.length&&(r=i,i=e,e=t);const{a:n,b:s,c:o,d:h,e:u,f:a}=this;return this.a=n*t,this.b=s*e,this.c=o*t,this.d=h*e,this.e=u*t-i*t+i,this.f=a*e-r*e+r,this}shear(t,e,i){return this.clone().shearO(t,e,i)}shearO(t,e=0,i=0){const{a:r,b:n,c:s,d:o,e:h,f:u}=this;return this.a=r+n*t,this.c=s+o*t,this.e=h+u*t-i*t,this}skew(t,e,i,r){return this.clone().skewO(...arguments)}skewO(t,e=t,i=0,r=0){3===arguments.length&&(r=i,i=e,e=t),t=u(t),e=u(e);const n=Math.tan(t),s=Math.tan(e),{a:o,b:h,c:a,d:l,e:c,f}=this;return this.a=o+h*n,this.b=h+o*s,this.c=a+l*n,this.d=l+a*s,this.e=c+f*n-r*n,this.f=f+c*s-i*s,this}skewX(t,e,i){return this.skew(t,0,e,i)}skewY(t,e,i){return this.skew(0,t,e,i)}toArray(){return[this.a,this.b,this.c,this.d,this.e,this.f]}toString(){return"matrix("+this.a+","+this.b+","+this.c+","+this.d+","+this.e+","+this.f+")"}transform(t){if(K.isMatrixLike(t))return new K(t).multiplyO(this);const e=K.formatTransforms(t),{x:i,y:r}=new Y(e.ox,e.oy).transform(this),n=(new K).translateO(e.rx,e.ry).lmultiplyO(this).translateO(-i,-r).scaleO(e.scaleX,e.scaleY).skewO(e.skewX,e.skewY).shearO(e.shear).rotateO(e.theta).translateO(i,r);if(isFinite(e.px)||isFinite(e.py)){const t=new Y(i,r).transform(n),s=isFinite(e.px)?e.px-t.x:0,o=isFinite(e.py)?e.py-t.y:0;n.translateO(s,o)}return n.translateO(e.tx,e.ty),n}translate(t,e){return this.clone().translateO(t,e)}translateO(t,e){return this.e+=t||0,this.f+=e||0,this}valueOf(){return{a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}}function $(){if(!$.nodes){const t=_().size(2,0);t.node.style.cssText=["opacity: 0","position: absolute","left: -100%","top: -100%","overflow: hidden"].join(";"),t.attr("focusable","false"),t.attr("aria-hidden","true");const e=t.path().node;$.nodes={svg:t,path:e}}if(!$.nodes.svg.node.parentNode){const t=g.document.body||g.document.documentElement;$.nodes.svg.addTo(t)}return $.nodes}function J(t){return!(t.width||t.height||t.x||t.y)}E(K,"Matrix");class Q{constructor(...t){this.init(...t)}addOffset(){return this.x+=g.window.pageXOffset,this.y+=g.window.pageYOffset,new Q(this)}init(t){return t="string"==typeof t?t.split(q).map(parseFloat):Array.isArray(t)?t:"object"==typeof t?[null!=t.left?t.left:t.x,null!=t.top?t.top:t.y,t.width,t.height]:4===arguments.length?[].slice.call(arguments):[0,0,0,0],this.x=t[0]||0,this.y=t[1]||0,this.width=this.w=t[2]||0,this.height=this.h=t[3]||0,this.x2=this.x+this.w,this.y2=this.y+this.h,this.cx=this.x+this.w/2,this.cy=this.y+this.h/2,this}isNulled(){return J(this)}merge(t){const e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),r=Math.max(this.x+this.width,t.x+t.width)-e,n=Math.max(this.y+this.height,t.y+t.height)-i;return new Q(e,i,r,n)}toArray(){return[this.x,this.y,this.width,this.height]}toString(){return this.x+" "+this.y+" "+this.width+" "+this.height}transform(t){t instanceof K||(t=new K(t));let e=1/0,i=-1/0,r=1/0,n=-1/0;return[new Y(this.x,this.y),new Y(this.x2,this.y),new Y(this.x,this.y2),new Y(this.x2,this.y2)].forEach((function(s){s=s.transform(t),e=Math.min(e,s.x),i=Math.max(i,s.x),r=Math.min(r,s.y),n=Math.max(n,s.y)})),new Q(e,r,i-e,n-r)}}function tt(t,e,i){let r;try{if(r=e(t.node),J(r)&&(n=t.node)!==g.document&&!(g.document.documentElement.contains||function(t){for(;t.parentNode;)t=t.parentNode;return t===g.document}).call(g.document.documentElement,n))throw new Error("Element not in the dom")}catch(e){r=i(t)}var n;return r}r({viewbox:{viewbox(t,e,i,r){return null==t?new Q(this.attr("viewBox")):this.attr("viewBox",new Q(t,e,i,r))},zoom(t,e){let{width:i,height:r}=this.attr(["width","height"]);if((i||r)&&"string"!=typeof i&&"string"!=typeof r||(i=this.node.clientWidth,r=this.node.clientHeight),!i||!r)throw new Error("Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element");const n=this.viewbox(),s=i/n.width,o=r/n.height,h=Math.min(s,o);if(null==t)return h;let u=h/t;u===1/0&&(u=Number.MAX_SAFE_INTEGER/100),e=e||new Y(i/2/s+n.x,r/2/o+n.y);const a=new Q(n).transform(new K({scale:u,origin:e}));return this.viewbox(a)}}}),E(Q,"Box");class et extends Array{constructor(t=[],...e){if(super(t,...e),"number"==typeof t)return this;this.length=0,this.push(...t)}}k([et],{each(t,...e){return"function"==typeof t?this.map(((e,i,r)=>t.call(e,e,i,r))):this.map((i=>i[t](...e)))},toArray(){return Array.prototype.concat.apply([],this)}});const it=["toArray","constructor","each"];function rt(t,e){return new et(o((e||g.document).querySelectorAll(t),(function(t){return x(t)})))}et.extend=function(t){t=t.reduce(((t,e)=>(it.includes(e)||"_"===e[0]||(t[e]=function(...t){return this.each(e,...t)}),t)),{}),k([et],t)};let nt=0;const st={};function ot(t){let e=t.getEventHolder();return e===g.window&&(e=st),e.events||(e.events={}),e.events}function ht(t){return t.getEventTarget()}function ut(t,e,i,r,n){const s=i.bind(r||t),o=_(t),h=ot(o),u=ht(o);e=Array.isArray(e)?e:e.split(q),i._svgjsListenerId||(i._svgjsListenerId=++nt),e.forEach((function(t){const e=t.split(".")[0],r=t.split(".")[1]||"*";h[e]=h[e]||{},h[e][r]=h[e][r]||{},h[e][r][i._svgjsListenerId]=s,u.addEventListener(e,s,n||!1)}))}function at(t,e,i,r){const n=_(t),s=ot(n),o=ht(n);("function"!=typeof i||(i=i._svgjsListenerId))&&(e=Array.isArray(e)?e:(e||"").split(q)).forEach((function(t){const e=t&&t.split(".")[0],h=t&&t.split(".")[1];let u,a;if(i)s[e]&&s[e][h||"*"]&&(o.removeEventListener(e,s[e][h||"*"][i],r||!1),delete s[e][h||"*"][i]);else if(e&&h){if(s[e]&&s[e][h]){for(a in s[e][h])at(o,[e,h].join("."),a);delete s[e][h]}}else if(h)for(t in s)for(u in s[t])h===u&&at(o,[t,h].join("."));else if(e){if(s[e]){for(u in s[e])at(o,[e,u].join("."));delete s[e]}}else{for(t in s)at(o,t);!function(t){let e=t.getEventHolder();e===g.window&&(e=st),e.events&&(e.events={})}(n)}}))}class lt extends y{addEventListener(){}dispatch(t,e,i){return function(t,e,i,r){const n=ht(t);return e instanceof g.window.Event||(e=new g.window.CustomEvent(e,{detail:i,cancelable:!0,...r})),n.dispatchEvent(e),e}(this,t,e,i)}dispatchEvent(t){const e=this.getEventHolder().events;if(!e)return!0;const i=e[t.type];for(const e in i)for(const r in i[e])i[e][r](t);return!t.defaultPrevented}fire(t,e,i){return this.dispatch(t,e,i),this}getEventHolder(){return this}getEventTarget(){return this}off(t,e){return at(this,t,e),this}on(t,e,i,r){return ut(this,t,e,i,r),this}removeEventListener(){}}function ct(){}E(lt,"EventTarget");const ft=400,dt=">",mt=0,pt={"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","text-anchor":"start"};class gt extends Array{constructor(...t){super(...t),this.init(...t)}clone(){return new this.constructor(this)}init(t){return"number"==typeof t||(this.length=0,this.push(...this.parse(t))),this}parse(t=[]){return t instanceof Array?t:t.trim().split(q).map(parseFloat)}toArray(){return Array.prototype.concat.apply([],this)}toSet(){return new Set(this)}toString(){return this.join(" ")}valueOf(){const t=[];return t.push(...this),t}}class yt{constructor(...t){this.init(...t)}convert(t){return new yt(this.value,t)}divide(t){return t=new yt(t),new yt(this/t,this.unit||t.unit)}init(t,e){return e=Array.isArray(t)?t[1]:e,t=Array.isArray(t)?t[0]:t,this.value=0,this.unit=e||"","number"==typeof t?this.value=isNaN(t)?0:isFinite(t)?t:t<0?-34e37:34e37:"string"==typeof t?(e=t.match(T))&&(this.value=parseFloat(e[1]),"%"===e[5]?this.value/=100:"s"===e[5]&&(this.value*=1e3),this.unit=e[5]):t instanceof yt&&(this.value=t.valueOf(),this.unit=t.unit),this}minus(t){return t=new yt(t),new yt(this-t,this.unit||t.unit)}plus(t){return t=new yt(t),new yt(this+t,this.unit||t.unit)}times(t){return t=new yt(t),new yt(this*t,this.unit||t.unit)}toArray(){return[this.value,this.unit]}toJSON(){return this.toString()}toString(){return("%"===this.unit?~~(1e8*this.value)/1e6:"s"===this.unit?this.value/1e3:this.value)+this.unit}valueOf(){return this.value}}const wt=[];class vt extends lt{constructor(t,e){super(),this.node=t,this.type=t.nodeName,e&&t!==e&&this.attr(e)}add(t,e){return(t=_(t)).removeNamespace&&this.node instanceof g.window.SVGElement&&t.removeNamespace(),null==e?this.node.appendChild(t.node):t.node!==this.node.childNodes[e]&&this.node.insertBefore(t.node,this.node.childNodes[e]),this}addTo(t,e){return _(t).put(this,e)}children(){return new et(o(this.node.children,(function(t){return x(t)})))}clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this}clone(t=!0){return this.writeDataToDom(),new this.constructor(S(this.node.cloneNode(t)))}each(t,e){const i=this.children();let r,n;for(r=0,n=i.length;r<n;r++)t.apply(i[r],[r,i]),e&&i[r].each(t,e);return this}element(t,e){return this.put(new vt(b(t),e))}first(){return x(this.node.firstChild)}get(t){return x(this.node.childNodes[t])}getEventHolder(){return this.node}getEventTarget(){return this.node}has(t){return this.index(t)>=0}html(t,e){return this.xml(t,e,"http://www.w3.org/1999/xhtml")}id(t){return void 0!==t||this.node.id||(this.node.id=O(this.type)),this.attr("id",t)}index(t){return[].slice.call(this.node.childNodes).indexOf(t.node)}last(){return x(this.node.lastChild)}matches(t){const e=this.node,i=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector||null;return i&&i.call(e,t)}parent(t){let e=this;if(!e.node.parentNode)return null;if(e=x(e.node.parentNode),!t)return e;do{if("string"==typeof t?e.matches(t):e instanceof t)return e}while(e=x(e.node.parentNode));return e}put(t,e){return t=_(t),this.add(t,e),t}putIn(t,e){return _(t).add(this,e)}remove(){return this.parent()&&this.parent().removeElement(this),this}removeElement(t){return this.node.removeChild(t.node),this}replace(t){return t=_(t),this.node.parentNode&&this.node.parentNode.replaceChild(t.node,this.node),t}round(t=2,e=null){const i=10**t,r=this.attr(e);for(const t in r)"number"==typeof r[t]&&(r[t]=Math.round(r[t]*i)/i);return this.attr(r),this}svg(t,e){return this.xml(t,e,d)}toString(){return this.id()}words(t){return this.node.textContent=t,this}wrap(t){const e=this.parent();if(!e)return this.addTo(t);const i=e.index(this);return e.put(t,i).put(this)}writeDataToDom(){return this.each((function(){this.writeDataToDom()})),this}xml(t,e,i){if("boolean"==typeof t&&(i=e,e=t,t=null),null==t||"function"==typeof t){e=null==e||e,this.writeDataToDom();let i=this;if(null!=t){if(i=x(i.node.cloneNode(!0)),e){const e=t(i);if(i=e||i,!1===e)return""}i.each((function(){const e=t(this),i=e||this;!1===e?this.remove():e&&this!==i&&this.replace(i)}),!0)}return e?i.node.outerHTML:i.node.innerHTML}e=null!=e&&e;const r=b("wrapper",i),n=g.document.createDocumentFragment();r.innerHTML=t;for(let t=r.children.length;t--;)n.appendChild(r.firstElementChild);const s=this.parent();return e?this.replace(n)&&s:this.add(n)}}k(vt,{attr:function(t,e,i){if(null==t){t={},e=this.node.attributes;for(const i of e)t[i.nodeName]=F.test(i.nodeValue)?parseFloat(i.nodeValue):i.nodeValue;return t}if(t instanceof Array)return t.reduce(((t,e)=>(t[e]=this.attr(e),t)),{});if("object"==typeof t&&t.constructor===Object)for(e in t)this.attr(e,t[e]);else if(null===e)this.node.removeAttribute(t);else{if(null==e)return null==(e=this.node.getAttribute(t))?pt[t]:F.test(e)?parseFloat(e):e;"number"==typeof(e=wt.reduce(((e,i)=>i(t,e,this)),e))?e=new yt(e):V.isColor(e)?e=new V(e):e.constructor===Array&&(e=new gt(e)),"leading"===t?this.leading&&this.leading(e):"string"==typeof i?this.node.setAttributeNS(i,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||"font-size"!==t&&"x"!==t||this.rebuild()}return this},find:function(t){return rt(t,this.node)},findOne:function(t){return x(this.node.querySelector(t))}}),E(vt,"Dom");class bt extends vt{constructor(t,e){super(t,e),this.dom={},this.node.instance=this,t.hasAttribute("svgjs:data")&&this.setData(JSON.parse(t.getAttribute("svgjs:data"))||{})}center(t,e){return this.cx(t).cy(e)}cx(t){return null==t?this.x()+this.width()/2:this.x(t-this.width()/2)}cy(t){return null==t?this.y()+this.height()/2:this.y(t-this.height()/2)}defs(){const t=this.root();return t&&t.defs()}dmove(t,e){return this.dx(t).dy(e)}dx(t=0){return this.x(new yt(t).plus(this.x()))}dy(t=0){return this.y(new yt(t).plus(this.y()))}getEventHolder(){return this}height(t){return this.attr("height",t)}move(t,e){return this.x(t).y(e)}parents(t=this.root()){t=_(t);const e=new et;let i=this;for(;(i=i.parent())&&i.node!==g.document&&"#document-fragment"!==i.nodeName&&(e.push(i),i.node!==t.node););return e}reference(t){if(!(t=this.attr(t)))return null;const e=(t+"").match(L);return e?_(e[1]):null}root(){const t=this.parent(w[v]);return t&&t.root()}setData(t){return this.dom=t,this}size(t,e){const i=c(this,t,e);return this.width(new yt(i.width)).height(new yt(i.height))}width(t){return this.attr("width",t)}writeDataToDom(){return this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),super.writeDataToDom()}x(t){return this.attr("x",t)}y(t){return this.attr("y",t)}}k(bt,{bbox:function(){const t=tt(this,(t=>t.getBBox()),(t=>{try{const e=t.clone().addTo($().svg).show(),i=e.node.getBBox();return e.remove(),i}catch(e){throw new Error(`Getting bbox of element "${t.node.nodeName}" is not possible: ${e.toString()}`)}}));return new Q(t)},rbox:function(t){const e=tt(this,(t=>t.getBoundingClientRect()),(t=>{throw new Error(`Getting rbox of element "${t.node.nodeName}" is not possible`)})),i=new Q(e);return t?i.transform(t.screenCTM().inverseO()):i.addOffset()},inside:function(t,e){const i=this.bbox();return t>i.x&&e>i.y&&t<i.x+i.width&&e<i.y+i.height},point:function(t,e){return new Y(t,e).transform(this.screenCTM().inverse())},ctm:function(){return new K(this.node.getCTM())},screenCTM:function(){if("function"==typeof this.isRoot&&!this.isRoot()){const t=this.rect(1,1),e=t.node.getScreenCTM();return t.remove(),new K(e)}return new K(this.node.getScreenCTM())}}),E(bt,"Element");const _t={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return"color"===e?t:t+"-"+e}};["fill","stroke"].forEach((function(t){const e={};let i;e[t]=function(e){if(void 0===e)return this.attr(t);if("string"==typeof e||e instanceof V||V.isRgb(e)||e instanceof bt)this.attr(t,e);else for(i=_t[t].length-1;i>=0;i--)null!=e[_t[t][i]]&&this.attr(_t.prefix(t,_t[t][i]),e[_t[t][i]]);return this},r(["Element","Runner"],e)})),r(["Element","Runner"],{matrix:function(t,e,i,r,n,s){return null==t?new K(this):this.attr("transform",new K(t,e,i,r,n,s))},rotate:function(t,e,i){return this.transform({rotate:t,ox:e,oy:i},!0)},skew:function(t,e,i,r){return 1===arguments.length||3===arguments.length?this.transform({skew:t,ox:e,oy:i},!0):this.transform({skew:[t,e],ox:i,oy:r},!0)},shear:function(t,e,i){return this.transform({shear:t,ox:e,oy:i},!0)},scale:function(t,e,i,r){return 1===arguments.length||3===arguments.length?this.transform({scale:t,ox:e,oy:i},!0):this.transform({scale:[t,e],ox:i,oy:r},!0)},translate:function(t,e){return this.transform({translate:[t,e]},!0)},relative:function(t,e){return this.transform({relative:[t,e]},!0)},flip:function(t="both",e="center"){return-1==="xybothtrue".indexOf(t)&&(e=t,t="both"),this.transform({flip:t,origin:e},!0)},opacity:function(t){return this.attr("opacity",t)}}),r("radius",{radius:function(t,e=t){return"radialGradient"===(this._element||this).type?this.attr("r",new yt(t)):this.rx(t).ry(e)}}),r("Path",{length:function(){return this.node.getTotalLength()},pointAt:function(t){return new Y(this.node.getPointAtLength(t))}}),r(["Element","Runner"],{font:function(t,e){if("object"==typeof t){for(e in t)this.font(e,t[e]);return this}return"leading"===t?this.leading(e):"anchor"===t?this.attr("text-anchor",e):"size"===t||"family"===t||"weight"===t||"stretch"===t||"variant"===t||"style"===t?this.attr("font-"+t,e):this.attr(t,e)}}),r("Element",["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].reduce((function(t,e){return t[e]=function(t){return null===t?this.off(e):this.on(e,t),this},t}),{})),r("Element",{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(j).slice(0,-1).map((function(t){const e=t.trim().split("(");return[e[0],e[1].split(q).map((function(t){return parseFloat(t)}))]})).reverse().reduce((function(t,e){return"matrix"===e[0]?t.lmultiply(K.fromArray(e[1])):t[e[0]].apply(t,e[1])}),new K)},toParent:function(t,e){if(this===t)return this;const i=this.screenCTM(),r=t.screenCTM().inverse();return this.addTo(t,e).untransform().transform(r.multiply(i)),this},toRoot:function(t){return this.toParent(this.root(),t)},transform:function(t,e){if(null==t||"string"==typeof t){const e=new K(this).decompose();return null==t?e:e[t]}K.isMatrixLike(t)||(t={...t,origin:f(t,this)});const i=new K(!0===e?this:e||!1).transform(t);return this.attr("transform",i)}});class Mt extends bt{flatten(t=this,e){return this.each((function(){if(this instanceof Mt)return this.flatten().ungroup()})),this}ungroup(t=this.parent(),e=t.index(this)){return e=-1===e?t.children().length:e,this.each((function(i,r){return r[r.length-i-1].toParent(t,e)})),this.remove()}}E(Mt,"Container");class xt extends Mt{constructor(t,e=t){super(M("defs",t),e)}flatten(){return this}ungroup(){return this}}E(xt,"Defs");class At extends bt{}function Et(t){return this.attr("rx",t)}function Nt(t){return this.attr("ry",t)}function Ot(t){return null==t?this.cx()-this.rx():this.cx(t+this.rx())}function St(t){return null==t?this.cy()-this.ry():this.cy(t+this.ry())}function kt(t){return this.attr("cx",t)}function Ct(t){return this.attr("cy",t)}function Tt(t){return null==t?2*this.rx():this.rx(new yt(t).divide(2))}function Rt(t){return null==t?2*this.ry():this.ry(new yt(t).divide(2))}E(At,"Shape");var It={__proto__:null,rx:Et,ry:Nt,x:Ot,y:St,cx:kt,cy:Ct,width:Tt,height:Rt};class Lt extends At{constructor(t,e=t){super(M("ellipse",t),e)}size(t,e){const i=c(this,t,e);return this.rx(new yt(i.width).divide(2)).ry(new yt(i.height).divide(2))}}k(Lt,It),r("Container",{ellipse:C((function(t=0,e=t){return this.put(new Lt).size(t,e).move(0,0)}))}),E(Lt,"Ellipse");class jt extends vt{constructor(t=g.document.createDocumentFragment()){super(t)}xml(t,e,i){if("boolean"==typeof t&&(i=e,e=t,t=null),null==t||"function"==typeof t){const t=new vt(b("wrapper",i));return t.add(this.node.cloneNode(!0)),t.xml(!1,i)}return super.xml(t,!1,i)}}function Dt(t,e){return"radialGradient"===(this._element||this).type?this.attr({fx:new yt(t),fy:new yt(e)}):this.attr({x1:new yt(t),y1:new yt(e)})}function Bt(t,e){return"radialGradient"===(this._element||this).type?this.attr({cx:new yt(t),cy:new yt(e)}):this.attr({x2:new yt(t),y2:new yt(e)})}E(jt,"Fragment");var zt,Pt={__proto__:null,from:Dt,to:Bt};class Ft extends Mt{constructor(t,e){super(M(t+"Gradient","string"==typeof t?null:t),e)}attr(t,e,i){return"transform"===t&&(t="gradientTransform"),super.attr(t,e,i)}bbox(){return new Q}targets(){return rt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}k(Ft,Pt),r({Container:{gradient(...t){return this.defs().gradient(...t)}},Defs:{gradient:C((function(t,e){return this.put(new Ft(t)).update(e)}))}}),E(Ft,"Gradient");class Ut extends Mt{constructor(t,e=t){super(M("pattern",t),e)}attr(t,e,i){return"transform"===t&&(t="patternTransform"),super.attr(t,e,i)}bbox(){return new Q}targets(){return rt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}r({Container:{pattern(...t){return this.defs().pattern(...t)}},Defs:{pattern:C((function(t,e,i){return this.put(new Ut).update(i).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})}))}}),E(Ut,"Pattern");class qt extends At{constructor(t,e=t){super(M("image",t),e)}load(t,e){if(!t)return this;const i=new g.window.Image;return ut(i,"load",(function(t){const r=this.parent(Ut);0===this.width()&&0===this.height()&&this.size(i.width,i.height),r instanceof Ut&&0===r.width()&&0===r.height()&&r.size(this.width(),this.height()),"function"==typeof e&&e.call(this,t)}),this),ut(i,"load error",(function(){at(i)})),this.attr("href",i.src=t,p)}}zt=function(t,e,i){return"fill"!==t&&"stroke"!==t||U.test(e)&&(e=i.root().defs().image(e)),e instanceof qt&&(e=i.root().defs().pattern(0,0,(t=>{t.add(e)}))),e},wt.push(zt),r({Container:{image:C((function(t,e){return this.put(new qt).size(0,0).load(t,e)}))}}),E(qt,"Image");class Ht extends gt{bbox(){let t=-1/0,e=-1/0,i=1/0,r=1/0;return this.forEach((function(n){t=Math.max(n[0],t),e=Math.max(n[1],e),i=Math.min(n[0],i),r=Math.min(n[1],r)})),new Q(i,r,t-i,e-r)}move(t,e){const i=this.bbox();if(t-=i.x,e-=i.y,!isNaN(t)&&!isNaN(e))for(let i=this.length-1;i>=0;i--)this[i]=[this[i][0]+t,this[i][1]+e];return this}parse(t=[0,0]){const e=[];(t=t instanceof Array?Array.prototype.concat.apply([],t):t.trim().split(q).map(parseFloat)).length%2!=0&&t.pop();for(let i=0,r=t.length;i<r;i+=2)e.push([t[i],t[i+1]]);return e}size(t,e){let i;const r=this.bbox();for(i=this.length-1;i>=0;i--)r.width&&(this[i][0]=(this[i][0]-r.x)*t/r.width+r.x),r.height&&(this[i][1]=(this[i][1]-r.y)*e/r.height+r.y);return this}toLine(){return{x1:this[0][0],y1:this[0][1],x2:this[1][0],y2:this[1][1]}}toString(){const t=[];for(let e=0,i=this.length;e<i;e++)t.push(this[e].join(","));return t.join(" ")}transform(t){return this.clone().transformO(t)}transformO(t){K.isMatrixLike(t)||(t=new K(t));for(let e=this.length;e--;){const[i,r]=this[e];this[e][0]=t.a*i+t.c*r+t.e,this[e][1]=t.b*i+t.d*r+t.f}return this}}var Zt={__proto__:null,MorphArray:Ht,x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){const e=this.bbox();return null==t?e.width:this.size(t,e.height)},height:function(t){const e=this.bbox();return null==t?e.height:this.size(e.width,t)}};class Gt extends At{constructor(t,e=t){super(M("line",t),e)}array(){return new Ht([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])}move(t,e){return this.attr(this.array().move(t,e).toLine())}plot(t,e,i,r){return null==t?this.array():(t=void 0!==e?{x1:t,y1:e,x2:i,y2:r}:new Ht(t).toLine(),this.attr(t))}size(t,e){const i=c(this,t,e);return this.attr(this.array().size(i.width,i.height).toLine())}}k(Gt,Zt),r({Container:{line:C((function(...t){return Gt.prototype.plot.apply(this.put(new Gt),null!=t[0]?t:[0,0,0,0])}))}}),E(Gt,"Line");class Xt extends Mt{constructor(t,e=t){super(M("marker",t),e)}height(t){return this.attr("markerHeight",t)}orient(t){return this.attr("orient",t)}ref(t,e){return this.attr("refX",t).attr("refY",e)}toString(){return"url(#"+this.id()+")"}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}width(t){return this.attr("markerWidth",t)}}function Vt(t,e){return function(i){return null==i?this[t]:(this[t]=i,e&&e.call(this),this)}}r({Container:{marker(...t){return this.defs().marker(...t)}},Defs:{marker:C((function(t,e,i){return this.put(new Xt).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(i)}))},marker:{marker(t,e,i,r){let n=["marker"];return"all"!==t&&n.push(t),n=n.join("-"),t=arguments[1]instanceof Xt?arguments[1]:this.defs().marker(e,i,r),this.attr(n,t)}}}),E(Xt,"Marker");const Yt={"-":function(t){return t},"<>":function(t){return-Math.cos(t*Math.PI)/2+.5},">":function(t){return Math.sin(t*Math.PI/2)},"<":function(t){return 1-Math.cos(t*Math.PI/2)},bezier:function(t,e,i,r){return function(n){return n<0?t>0?e/t*n:i>0?r/i*n:0:n>1?i<1?(1-r)/(1-i)*n+(r-i)/(1-i):t<1?(1-e)/(1-t)*n+(e-t)/(1-t):1:3*n*(1-n)**2*e+3*n**2*(1-n)*r+n**3}},steps:function(t,e="end"){e=e.split("-").reverse()[0];let i=t;return"none"===e?--i:"both"===e&&++i,(r,n=!1)=>{let s=Math.floor(r*t);const o=r*s%1==0;return"start"!==e&&"both"!==e||++s,n&&o&&--s,r>=0&&s<0&&(s=0),r<=1&&s>i&&(s=i),s/i}}};class Wt{done(){return!1}}class Kt extends Wt{constructor(t=dt){super(),this.ease=Yt[t]||t}step(t,e,i){return"number"!=typeof t?i<1?t:e:t+(e-t)*this.ease(i)}}class $t extends Wt{constructor(t){super(),this.stepper=t}done(t){return t.done}step(t,e,i,r){return this.stepper(t,e,i,r)}}function Jt(){const t=(this._duration||500)/1e3,e=this._overshoot||0,i=Math.PI,r=Math.log(e/100+1e-10),n=-r/Math.sqrt(i*i+r*r),s=3.9/(n*t);this.d=2*n*s,this.k=s*s}k(class extends $t{constructor(t=500,e=0){super(),this.duration(t).overshoot(e)}step(t,e,i,r){if("string"==typeof t)return t;if(r.done=i===1/0,i===1/0)return e;if(0===i)return t;i>100&&(i=16),i/=1e3;const n=r.velocity||0,s=-this.d*n-this.k*(t-e),o=t+n*i+s*i*i/2;return r.velocity=n+s*i,r.done=Math.abs(e-o)+Math.abs(n)<.002,r.done?e:o}},{duration:Vt("_duration",Jt),overshoot:Vt("_overshoot",Jt)}),k(class extends $t{constructor(t=.1,e=.01,i=0,r=1e3){super(),this.p(t).i(e).d(i).windup(r)}step(t,e,i,r){if("string"==typeof t)return t;if(r.done=i===1/0,i===1/0)return e;if(0===i)return t;const n=e-t;let s=(r.integral||0)+n*i;const o=(n-(r.error||0))/i,h=this._windup;return!1!==h&&(s=Math.max(-h,Math.min(s,h))),r.error=n,r.integral=s,r.done=Math.abs(n)<.001,r.done?e:t+(this.P*n+this.I*s+this.D*o)}},{windup:Vt("_windup"),p:Vt("P"),i:Vt("I"),d:Vt("D")});const Qt={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0},te={M:function(t,e,i){return e.x=i.x=t[0],e.y=i.y=t[1],["M",e.x,e.y]},L:function(t,e){return e.x=t[0],e.y=t[1],["L",t[0],t[1]]},H:function(t,e){return e.x=t[0],["H",t[0]]},V:function(t,e){return e.y=t[0],["V",t[0]]},C:function(t,e){return e.x=t[4],e.y=t[5],["C",t[0],t[1],t[2],t[3],t[4],t[5]]},S:function(t,e){return e.x=t[2],e.y=t[3],["S",t[0],t[1],t[2],t[3]]},Q:function(t,e){return e.x=t[2],e.y=t[3],["Q",t[0],t[1],t[2],t[3]]},T:function(t,e){return e.x=t[0],e.y=t[1],["T",t[0],t[1]]},Z:function(t,e,i){return e.x=i.x,e.y=i.y,["Z"]},A:function(t,e){return e.x=t[5],e.y=t[6],["A",t[0],t[1],t[2],t[3],t[4],t[5],t[6]]}},ee="mlhvqtcsaz".split("");for(let t=0,e=ee.length;t<e;++t)te[ee[t]]=function(t){return function(e,i,r){if("H"===t)e[0]=e[0]+i.x;else if("V"===t)e[0]=e[0]+i.y;else if("A"===t)e[5]=e[5]+i.x,e[6]=e[6]+i.y;else for(let t=0,r=e.length;t<r;++t)e[t]=e[t]+(t%2?i.y:i.x);return te[t](e,i,r)}}(ee[t].toUpperCase());function ie(t){return t.segment.length&&t.segment.length-1===Qt[t.segment[0].toUpperCase()]}function re(t,e){t.inNumber&&ne(t,!1);const i=H.test(e);if(i)t.segment=[e];else{const e=t.lastCommand,i=e.toLowerCase(),r=e===i;t.segment=["m"===i?r?"l":"L":e]}return t.inSegment=!0,t.lastCommand=t.segment[0],i}function ne(t,e){if(!t.inNumber)throw new Error("Parser Error");t.number&&t.segment.push(parseFloat(t.number)),t.inNumber=e,t.number="",t.pointSeen=!1,t.hasExponent=!1,ie(t)&&se(t)}function se(t){t.inSegment=!1,t.absolute&&(t.segment=function(t){const e=t.segment[0];return te[e](t.segment.slice(1),t.p,t.p0)}(t)),t.segments.push(t.segment)}function oe(t){if(!t.segment.length)return!1;const e="A"===t.segment[0].toUpperCase(),i=t.segment.length;return e&&(4===i||5===i)}function he(t){return"E"===t.lastToken.toUpperCase()}class ue extends gt{bbox(){return $().path.setAttribute("d",this.toString()),new Q($.nodes.path.getBBox())}move(t,e){const i=this.bbox();if(t-=i.x,e-=i.y,!isNaN(t)&&!isNaN(e))for(let i,r=this.length-1;r>=0;r--)i=this[r][0],"M"===i||"L"===i||"T"===i?(this[r][1]+=t,this[r][2]+=e):"H"===i?this[r][1]+=t:"V"===i?this[r][1]+=e:"C"===i||"S"===i||"Q"===i?(this[r][1]+=t,this[r][2]+=e,this[r][3]+=t,this[r][4]+=e,"C"===i&&(this[r][5]+=t,this[r][6]+=e)):"A"===i&&(this[r][6]+=t,this[r][7]+=e);return this}parse(t="M0 0"){return Array.isArray(t)&&(t=Array.prototype.concat.apply([],t).toString()),function(t,e=!0){let i=0,r="";const n={segment:[],inNumber:!1,number:"",lastToken:"",inSegment:!1,segments:[],pointSeen:!1,hasExponent:!1,absolute:e,p0:new Y,p:new Y};for(;n.lastToken=r,r=t.charAt(i++);)if(n.inSegment||!re(n,r))if("."!==r)if(isNaN(parseInt(r)))if(" "!==r&&","!==r)if("-"!==r)if("E"!==r.toUpperCase()){if(H.test(r)){if(n.inNumber)ne(n,!1);else{if(!ie(n))throw new Error("parser Error");se(n)}--i}}else n.number+=r,n.hasExponent=!0;else{if(n.inNumber&&!he(n)){ne(n,!1),--i;continue}n.number+=r,n.inNumber=!0}else n.inNumber&&ne(n,!1);else{if("0"===n.number||oe(n)){n.inNumber=!0,n.number=r,ne(n,!0);continue}n.inNumber=!0,n.number+=r}else{if(n.pointSeen||n.hasExponent){ne(n,!1),--i;continue}n.inNumber=!0,n.pointSeen=!0,n.number+=r}return n.inNumber&&ne(n,!1),n.inSegment&&ie(n)&&se(n),n.segments}(t)}size(t,e){const i=this.bbox();let r,n;for(i.width=0===i.width?1:i.width,i.height=0===i.height?1:i.height,r=this.length-1;r>=0;r--)n=this[r][0],"M"===n||"L"===n||"T"===n?(this[r][1]=(this[r][1]-i.x)*t/i.width+i.x,this[r][2]=(this[r][2]-i.y)*e/i.height+i.y):"H"===n?this[r][1]=(this[r][1]-i.x)*t/i.width+i.x:"V"===n?this[r][1]=(this[r][1]-i.y)*e/i.height+i.y:"C"===n||"S"===n||"Q"===n?(this[r][1]=(this[r][1]-i.x)*t/i.width+i.x,this[r][2]=(this[r][2]-i.y)*e/i.height+i.y,this[r][3]=(this[r][3]-i.x)*t/i.width+i.x,this[r][4]=(this[r][4]-i.y)*e/i.height+i.y,"C"===n&&(this[r][5]=(this[r][5]-i.x)*t/i.width+i.x,this[r][6]=(this[r][6]-i.y)*e/i.height+i.y)):"A"===n&&(this[r][1]=this[r][1]*t/i.width,this[r][2]=this[r][2]*e/i.height,this[r][6]=(this[r][6]-i.x)*t/i.width+i.x,this[r][7]=(this[r][7]-i.y)*e/i.height+i.y);return this}toString(){return function(t){let e="";for(let i=0,r=t.length;i<r;i++)e+=t[i][0],null!=t[i][1]&&(e+=t[i][1],null!=t[i][2]&&(e+=" ",e+=t[i][2],null!=t[i][3]&&(e+=" ",e+=t[i][3],e+=" ",e+=t[i][4],null!=t[i][5]&&(e+=" ",e+=t[i][5],e+=" ",e+=t[i][6],null!=t[i][7]&&(e+=" ",e+=t[i][7])))));return e+" "}(this)}}const ae=t=>{const e=typeof t;return"number"===e?yt:"string"===e?V.isColor(t)?V:q.test(t)?H.test(t)?ue:gt:T.test(t)?yt:ce:pe.indexOf(t.constructor)>-1?t.constructor:Array.isArray(t)?gt:"object"===e?me:ce};class le{constructor(t){this._stepper=t||new Kt("-"),this._from=null,this._to=null,this._type=null,this._context=null,this._morphObj=null}at(t){const e=this;return this._morphObj.fromArray(this._from.map((function(i,r){return e._stepper.step(i,e._to[r],t,e._context[r],e._context)})))}done(){return this._context.map(this._stepper.done).reduce((function(t,e){return t&&e}),!0)}from(t){return null==t?this._from:(this._from=this._set(t),this)}stepper(t){return null==t?this._stepper:(this._stepper=t,this)}to(t){return null==t?this._to:(this._to=this._set(t),this)}type(t){return null==t?this._type:(this._type=t,this)}_set(t){this._type||this.type(ae(t));let e=new this._type(t);return this._type===V&&(e=this._to?e[this._to[4]]():this._from?e[this._from[4]]():e),this._type===me&&(e=this._to?e.align(this._to):this._from?e.align(this._from):e),e=e.toArray(),this._morphObj=this._morphObj||new this._type,this._context=this._context||Array.apply(null,Array(e.length)).map(Object).map((function(t){return t.done=!0,t})),e}}class ce{constructor(...t){this.init(...t)}init(t){return t=Array.isArray(t)?t[0]:t,this.value=t,this}toArray(){return[this.value]}valueOf(){return this.value}}class fe{constructor(...t){this.init(...t)}init(t){return Array.isArray(t)&&(t={scaleX:t[0],scaleY:t[1],shear:t[2],rotate:t[3],translateX:t[4],translateY:t[5],originX:t[6],originY:t[7]}),Object.assign(this,fe.defaults,t),this}toArray(){const t=this;return[t.scaleX,t.scaleY,t.shear,t.rotate,t.translateX,t.translateY,t.originX,t.originY]}}fe.defaults={scaleX:1,scaleY:1,shear:0,rotate:0,translateX:0,translateY:0,originX:0,originY:0};const de=(t,e)=>t[0]<e[0]?-1:t[0]>e[0]?1:0;class me{constructor(...t){this.init(...t)}align(t){for(let e=0,i=this.values.length;e<i;++e)if(this.values[e]===V){const i=t[e+6],r=new V(this.values.splice(e+2,5))[i]().toArray();this.values.splice(e+2,0,...r)}return this}init(t){if(this.values=[],Array.isArray(t))return void(this.values=t.slice());t=t||{};const e=[];for(const i in t){const r=ae(t[i]),n=new r(t[i]).toArray();e.push([i,r,n.length,...n])}return e.sort(de),this.values=e.reduce(((t,e)=>t.concat(e)),[]),this}toArray(){return this.values}valueOf(){const t={},e=this.values;for(;e.length;){const i=e.shift(),r=e.shift(),n=e.shift(),s=e.splice(0,n);t[i]=new r(s).valueOf()}return t}}const pe=[ce,fe,me];class ge extends At{constructor(t,e=t){super(M("path",t),e)}array(){return this._array||(this._array=new ue(this.attr("d")))}clear(){return delete this._array,this}height(t){return null==t?this.bbox().height:this.size(this.bbox().width,t)}move(t,e){return this.attr("d",this.array().move(t,e))}plot(t){return null==t?this.array():this.clear().attr("d","string"==typeof t?t:this._array=new ue(t))}size(t,e){const i=c(this,t,e);return this.attr("d",this.array().size(i.width,i.height))}width(t){return null==t?this.bbox().width:this.size(t,this.bbox().height)}x(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)}y(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)}}ge.prototype.MorphArray=ue,r({Container:{path:C((function(t){return this.put(new ge).plot(t||new ue)}))}}),E(ge,"Path");var ye={__proto__:null,array:function(){return this._array||(this._array=new Ht(this.attr("points")))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("points",this.array().move(t,e))},plot:function(t){return null==t?this.array():this.clear().attr("points","string"==typeof t?t:this._array=new Ht(t))},size:function(t,e){const i=c(this,t,e);return this.attr("points",this.array().size(i.width,i.height))}};class we extends At{constructor(t,e=t){super(M("polygon",t),e)}}r({Container:{polygon:C((function(t){return this.put(new we).plot(t||new Ht)}))}}),k(we,Zt),k(we,ye),E(we,"Polygon");class ve extends At{constructor(t,e=t){super(M("polyline",t),e)}}r({Container:{polyline:C((function(t){return this.put(new ve).plot(t||new Ht)}))}}),k(ve,Zt),k(ve,ye),E(ve,"Polyline");class be extends At{constructor(t,e=t){super(M("rect",t),e)}}k(be,{rx:Et,ry:Nt}),r({Container:{rect:C((function(t,e){return this.put(new be).size(t,e)}))}}),E(be,"Rect");class _e{constructor(){this._first=null,this._last=null}first(){return this._first&&this._first.value}last(){return this._last&&this._last.value}push(t){const e=void 0!==t.next?t:{value:t,next:null,prev:null};return this._last?(e.prev=this._last,this._last.next=e,this._last=e):(this._last=e,this._first=e),e}remove(t){t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next),t.prev=null,t.next=null}shift(){const t=this._first;return t?(this._first=t.next,this._first&&(this._first.prev=null),this._last=this._first?this._last:null,t.value):null}}const Me={nextDraw:null,frames:new _e,timeouts:new _e,immediates:new _e,timer:()=>g.window.performance||g.window.Date,transforms:[],frame(t){const e=Me.frames.push({run:t});return null===Me.nextDraw&&(Me.nextDraw=g.window.requestAnimationFrame(Me._draw)),e},timeout(t,e){e=e||0;const i=Me.timer().now()+e,r=Me.timeouts.push({run:t,time:i});return null===Me.nextDraw&&(Me.nextDraw=g.window.requestAnimationFrame(Me._draw)),r},immediate(t){const e=Me.immediates.push(t);return null===Me.nextDraw&&(Me.nextDraw=g.window.requestAnimationFrame(Me._draw)),e},cancelFrame(t){null!=t&&Me.frames.remove(t)},clearTimeout(t){null!=t&&Me.timeouts.remove(t)},cancelImmediate(t){null!=t&&Me.immediates.remove(t)},_draw(t){let e=null;const i=Me.timeouts.last();for(;(e=Me.timeouts.shift())&&(t>=e.time?e.run():Me.timeouts.push(e),e!==i););let r=null;const n=Me.frames.last();for(;r!==n&&(r=Me.frames.shift());)r.run(t);let s=null;for(;s=Me.immediates.shift();)s();Me.nextDraw=Me.timeouts.first()||Me.frames.first()?g.window.requestAnimationFrame(Me._draw):null}},xe=function(t){const e=t.start,i=t.runner.duration();return{start:e,duration:i,end:e+i,runner:t.runner}},Ae=function(){const t=g.window;return(t.performance||t.Date).now()};class Ee extends lt{constructor(t=Ae){super(),this._timeSource=t,this._startTime=0,this._speed=1,this._persist=0,this._nextFrame=null,this._paused=!0,this._runners=[],this._runnerIds=[],this._lastRunnerId=-1,this._time=0,this._lastSourceTime=0,this._lastStepTime=0,this._step=this._stepFn.bind(this,!1),this._stepImmediate=this._stepFn.bind(this,!0)}active(){return!!this._nextFrame}finish(){return this.time(this.getEndTimeOfTimeline()+1),this.pause()}getEndTime(){const t=this.getLastRunnerInfo(),e=t?t.runner.duration():0;return(t?t.start:this._time)+e}getEndTimeOfTimeline(){const t=this._runners.map((t=>t.start+t.runner.duration()));return Math.max(0,...t)}getLastRunnerInfo(){return this.getRunnerInfoById(this._lastRunnerId)}getRunnerInfoById(t){return this._runners[this._runnerIds.indexOf(t)]||null}pause(){return this._paused=!0,this._continue()}persist(t){return null==t?this._persist:(this._persist=t,this)}play(){return this._paused=!1,this.updateTime()._continue()}reverse(t){const e=this.speed();if(null==t)return this.speed(-e);const i=Math.abs(e);return this.speed(t?-i:i)}schedule(t,e,i){if(null==t)return this._runners.map(xe);let r=0;const n=this.getEndTime();if(e=e||0,null==i||"last"===i||"after"===i)r=n;else if("absolute"===i||"start"===i)r=e,e=0;else if("now"===i)r=this._time;else if("relative"===i){const i=this.getRunnerInfoById(t.id);i&&(r=i.start+e,e=0)}else{if("with-last"!==i)throw new Error('Invalid value for the "when" parameter');{const t=this.getLastRunnerInfo();r=t?t.start:this._time}}t.unschedule(),t.timeline(this);const s=t.persist(),o={persist:null===s?this._persist:s,start:r+e,runner:t};return this._lastRunnerId=t.id,this._runners.push(o),this._runners.sort(((t,e)=>t.start-e.start)),this._runnerIds=this._runners.map((t=>t.runner.id)),this.updateTime()._continue(),this}seek(t){return this.time(this._time+t)}source(t){return null==t?this._timeSource:(this._timeSource=t,this)}speed(t){return null==t?this._speed:(this._speed=t,this)}stop(){return this.time(0),this.pause()}time(t){return null==t?this._time:(this._time=t,this._continue(!0))}unschedule(t){const e=this._runnerIds.indexOf(t.id);return e<0||(this._runners.splice(e,1),this._runnerIds.splice(e,1),t.timeline(null)),this}updateTime(){return this.active()||(this._lastSourceTime=this._timeSource()),this}_continue(t=!1){return Me.cancelFrame(this._nextFrame),this._nextFrame=null,t?this._stepImmediate():(this._paused||(this._nextFrame=Me.frame(this._step)),this)}_stepFn(t=!1){const e=this._timeSource();let i=e-this._lastSourceTime;t&&(i=0);const r=this._speed*i+(this._time-this._lastStepTime);this._lastSourceTime=e,t||(this._time+=r,this._time=this._time<0?0:this._time),this._lastStepTime=this._time,this.fire("time",this._time);for(let t=this._runners.length;t--;){const e=this._runners[t],i=e.runner;this._time-e.start<=0&&i.reset()}let n=!1;for(let t=0,e=this._runners.length;t<e;t++){const i=this._runners[t],s=i.runner;let o=r;const h=this._time-i.start;h<=0?n=!0:(h<o&&(o=h),s.active()&&(s.step(o).done?!0!==i.persist&&s.duration()-s.time()+this._time+i.persist<this._time&&(s.unschedule(),--t,--e):n=!0))}return n&&!(this._speed<0&&0===this._time)||this._runnerIds.length&&this._speed<0&&this._time>0?this._continue():(this.pause(),this.fire("finished")),this}}r({Element:{timeline:function(t){return null==t?(this._timeline=this._timeline||new Ee,this._timeline):(this._timeline=t,this)}}});class Ne extends lt{constructor(t){super(),this.id=Ne.id++,t="function"==typeof(t=null==t?ft:t)?new $t(t):t,this._element=null,this._timeline=null,this.done=!1,this._queue=[],this._duration="number"==typeof t&&t,this._isDeclarative=t instanceof $t,this._stepper=this._isDeclarative?t:new Kt,this._history={},this.enabled=!0,this._time=0,this._lastTime=0,this._reseted=!0,this.transforms=new K,this.transformId=1,this._haveReversed=!1,this._reverse=!1,this._loopsDone=0,this._swing=!1,this._wait=0,this._times=1,this._frameId=null,this._persist=!!this._isDeclarative||null}static sanitise(t,e,i){let r=1,n=!1,s=0;return e=e||mt,i=i||"last","object"!=typeof(t=t||ft)||t instanceof Wt||(e=t.delay||e,i=t.when||i,n=t.swing||n,r=t.times||r,s=t.wait||s,t=t.duration||ft),{duration:t,delay:e,swing:n,times:r,wait:s,when:i}}active(t){return null==t?this.enabled:(this.enabled=t,this)}addTransform(t,e){return this.transforms.lmultiplyO(t),this}after(t){return this.on("finished",t)}animate(t,e,i){const r=Ne.sanitise(t,e,i),n=new Ne(r.duration);return this._timeline&&n.timeline(this._timeline),this._element&&n.element(this._element),n.loop(r).schedule(r.delay,r.when)}clearTransform(){return this.transforms=new K,this}clearTransformsFromQueue(){this.done&&this._timeline&&this._timeline._runnerIds.includes(this.id)||(this._queue=this._queue.filter((t=>!t.isTransform)))}delay(t){return this.animate(0,t)}duration(){return this._times*(this._wait+this._duration)-this._wait}during(t){return this.queue(null,t)}ease(t){return this._stepper=new Kt(t),this}element(t){return null==t?this._element:(this._element=t,t._prepareRunner(),this)}finish(){return this.step(1/0)}loop(t,e,i){return"object"==typeof t&&(e=t.swing,i=t.wait,t=t.times),this._times=t||1/0,this._swing=e||!1,this._wait=i||0,!0===this._times&&(this._times=1/0),this}loops(t){const e=this._duration+this._wait;if(null==t){const t=Math.floor(this._time/e),i=(this._time-t*e)/this._duration;return Math.min(t+i,this._times)}const i=t%1,r=e*Math.floor(t)+this._duration*i;return this.time(r)}persist(t){return null==t?this._persist:(this._persist=t,this)}position(t){const e=this._time,i=this._duration,r=this._wait,n=this._times,s=this._swing,o=this._reverse;let h;if(null==t){const t=function(t){const e=s*Math.floor(t%(2*(r+i))/(r+i)),n=e&&!o||!e&&o,h=Math.pow(-1,n)*(t%(r+i))/i+n;return Math.max(Math.min(h,1),0)},u=n*(r+i)-r;return h=e<=0?Math.round(t(1e-5)):e<u?t(e):Math.round(t(u-1e-5)),h}const u=Math.floor(this.loops()),a=s&&u%2==0;return h=u+(a&&!o||o&&a?t:1-t),this.loops(h)}progress(t){return null==t?Math.min(1,this._time/this.duration()):this.time(t*this.duration())}queue(t,e,i,r){return this._queue.push({initialiser:t||ct,runner:e||ct,retarget:i,isTransform:r,initialised:!1,finished:!1}),this.timeline()&&this.timeline()._continue(),this}reset(){return this._reseted||(this.time(0),this._reseted=!0),this}reverse(t){return this._reverse=null==t?!this._reverse:t,this}schedule(t,e,i){if(t instanceof Ee||(i=e,e=t,t=this.timeline()),!t)throw Error("Runner cannot be scheduled without timeline");return t.schedule(this,e,i),this}step(t){if(!this.enabled)return this;t=null==t?16:t,this._time+=t;const e=this.position(),i=this._lastPosition!==e&&this._time>=0;this._lastPosition=e;const r=this.duration(),n=this._lastTime<=0&&this._time>0,s=this._lastTime<r&&this._time>=r;this._lastTime=this._time,n&&this.fire("start",this);const o=this._isDeclarative;this.done=!o&&!s&&this._time>=r,this._reseted=!1;let h=!1;return(i||o)&&(this._initialise(i),this.transforms=new K,h=this._run(o?t:e),this.fire("step",this)),this.done=this.done||h&&o,s&&this.fire("finished",this),this}time(t){if(null==t)return this._time;const e=t-this._time;return this.step(e),this}timeline(t){return void 0===t?this._timeline:(this._timeline=t,this)}unschedule(){const t=this.timeline();return t&&t.unschedule(this),this}_initialise(t){if(t||this._isDeclarative)for(let e=0,i=this._queue.length;e<i;++e){const i=this._queue[e],r=this._isDeclarative||!i.initialised&&t;t=!i.finished,r&&t&&(i.initialiser.call(this),i.initialised=!0)}}_rememberMorpher(t,e){if(this._history[t]={morpher:e,caller:this._queue[this._queue.length-1]},this._isDeclarative){const t=this.timeline();t&&t.play()}}_run(t){let e=!0;for(let i=0,r=this._queue.length;i<r;++i){const r=this._queue[i],n=r.runner.call(this,t);r.finished=r.finished||!0===n,e=e&&r.finished}return e}_tryRetarget(t,e,i){if(this._history[t]){if(!this._history[t].caller.initialised){const e=this._queue.indexOf(this._history[t].caller);return this._queue.splice(e,1),!1}this._history[t].caller.retarget?this._history[t].caller.retarget.call(this,e,i):this._history[t].morpher.to(e),this._history[t].caller.finished=!1;const r=this.timeline();return r&&r.play(),!0}return!1}}Ne.id=0;class Oe{constructor(t=new K,e=-1,i=!0){this.transforms=t,this.id=e,this.done=i}clearTransformsFromQueue(){}}k([Ne,Oe],{mergeWith(t){return new Oe(t.transforms.lmultiply(this.transforms),t.id)}});const Se=(t,e)=>t.lmultiplyO(e),ke=t=>t.transforms;function Ce(){const t=this._transformationRunners.runners.map(ke).reduce(Se,new K);this.transform(t),this._transformationRunners.merge(),1===this._transformationRunners.length()&&(this._frameId=null)}class Te{constructor(){this.runners=[],this.ids=[]}add(t){if(this.runners.includes(t))return;const e=t.id+1;return this.runners.push(t),this.ids.push(e),this}clearBefore(t){const e=this.ids.indexOf(t+1)||1;return this.ids.splice(0,e,0),this.runners.splice(0,e,new Oe).forEach((t=>t.clearTransformsFromQueue())),this}edit(t,e){const i=this.ids.indexOf(t+1);return this.ids.splice(i,1,t+1),this.runners.splice(i,1,e),this}getByID(t){return this.runners[this.ids.indexOf(t+1)]}length(){return this.ids.length}merge(){let t=null;for(let e=0;e<this.runners.length;++e){const i=this.runners[e];if(!(t&&i.done&&t.done)||i._timeline&&i._timeline._runnerIds.includes(i.id)||t._timeline&&t._timeline._runnerIds.includes(t.id))t=i;else{this.remove(i.id);const r=i.mergeWith(t);this.edit(t.id,r),t=r,--e}}return this}remove(t){const e=this.ids.indexOf(t+1);return this.ids.splice(e,1),this.runners.splice(e,1),this}}r({Element:{animate(t,e,i){const r=Ne.sanitise(t,e,i),n=this.timeline();return new Ne(r.duration).loop(r).element(this).timeline(n.play()).schedule(r.delay,r.when)},delay(t,e){return this.animate(0,t,e)},_clearTransformRunnersBefore(t){this._transformationRunners.clearBefore(t.id)},_currentTransform(t){return this._transformationRunners.runners.filter((e=>e.id<=t.id)).map(ke).reduce(Se,new K)},_addRunner(t){this._transformationRunners.add(t),Me.cancelImmediate(this._frameId),this._frameId=Me.immediate(Ce.bind(this))},_prepareRunner(){null==this._frameId&&(this._transformationRunners=(new Te).add(new Oe(new K(this))))}}}),k(Ne,{attr(t,e){return this.styleAttr("attr",t,e)},css(t,e){return this.styleAttr("css",t,e)},styleAttr(t,e,i){if("string"==typeof e)return this.styleAttr(t,{[e]:i});let r=e;if(this._tryRetarget(t,r))return this;let n=new le(this._stepper).to(r),s=Object.keys(r);return this.queue((function(){n=n.from(this.element()[t](s))}),(function(e){return this.element()[t](n.at(e).valueOf()),n.done()}),(function(e){const i=Object.keys(e),o=(h=s,i.filter((t=>!h.includes(t))));var h;if(o.length){const e=this.element()[t](o),i=new me(n.from()).valueOf();Object.assign(i,e),n.from(i)}const u=new me(n.to()).valueOf();Object.assign(u,e),n.to(u),s=i,r=e})),this._rememberMorpher(t,n),this},zoom(t,e){if(this._tryRetarget("zoom",t,e))return this;let i=new le(this._stepper).to(new yt(t));return this.queue((function(){i=i.from(this.element().zoom())}),(function(t){return this.element().zoom(i.at(t),e),i.done()}),(function(t,r){e=r,i.to(t)})),this._rememberMorpher("zoom",i),this},transform(t,e,i){if(e=t.relative||e,this._isDeclarative&&!e&&this._tryRetarget("transform",t))return this;const r=K.isMatrixLike(t);i=null!=t.affine?t.affine:null!=i?i:!r;const n=new le(this._stepper).type(i?fe:K);let s,o,h,u,a;return this.queue((function(){o=o||this.element(),s=s||f(t,o),a=new K(e?void 0:o),o._addRunner(this),e||o._clearTransformRunnersBefore(this)}),(function(l){e||this.clearTransform();const{x:c,y:f}=new Y(s).transform(o._currentTransform(this));let d=new K({...t,origin:[c,f]}),m=this._isDeclarative&&h?h:a;if(i){d=d.decompose(c,f),m=m.decompose(c,f);const t=d.rotate,e=m.rotate,i=[t-360,t,t+360],r=i.map((t=>Math.abs(t-e))),n=Math.min(...r),s=r.indexOf(n);d.rotate=i[s]}e&&(r||(d.rotate=t.rotate||0),this._isDeclarative&&u&&(m.rotate=u)),n.from(m),n.to(d);const p=n.at(l);return u=p.rotate,h=new K(p),this.addTransform(h),o._addRunner(this),n.done()}),(function(e){(e.origin||"center").toString()!==(t.origin||"center").toString()&&(s=f(e,o)),t={...e,origin:s}}),!0),this._isDeclarative&&this._rememberMorpher("transform",n),this},x(t,e){return this._queueNumber("x",t)},y(t){return this._queueNumber("y",t)},dx(t=0){return this._queueNumberDelta("x",t)},dy(t=0){return this._queueNumberDelta("y",t)},dmove(t,e){return this.dx(t).dy(e)},_queueNumberDelta(t,e){if(e=new yt(e),this._tryRetarget(t,e))return this;const i=new le(this._stepper).to(e);let r=null;return this.queue((function(){r=this.element()[t](),i.from(r),i.to(r+e)}),(function(e){return this.element()[t](i.at(e)),i.done()}),(function(t){i.to(r+new yt(t))})),this._rememberMorpher(t,i),this},_queueObject(t,e){if(this._tryRetarget(t,e))return this;const i=new le(this._stepper).to(e);return this.queue((function(){i.from(this.element()[t]())}),(function(e){return this.element()[t](i.at(e)),i.done()})),this._rememberMorpher(t,i),this},_queueNumber(t,e){return this._queueObject(t,new yt(e))},cx(t){return this._queueNumber("cx",t)},cy(t){return this._queueNumber("cy",t)},move(t,e){return this.x(t).y(e)},center(t,e){return this.cx(t).cy(e)},size(t,e){let i;return t&&e||(i=this._element.bbox()),t||(t=i.width/i.height*e),e||(e=i.height/i.width*t),this.width(t).height(e)},width(t){return this._queueNumber("width",t)},height(t){return this._queueNumber("height",t)},plot(t,e,i,r){if(4===arguments.length)return this.plot([t,e,i,r]);if(this._tryRetarget("plot",t))return this;const n=new le(this._stepper).type(this._element.MorphArray).to(t);return this.queue((function(){n.from(this._element.array())}),(function(t){return this._element.plot(n.at(t)),n.done()})),this._rememberMorpher("plot",n),this},leading(t){return this._queueNumber("leading",t)},viewbox(t,e,i,r){return this._queueObject("viewbox",new Q(t,e,i,r))},update(t){return"object"!=typeof t?this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]}):(null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",t.offset),this)}}),k(Ne,{rx:Et,ry:Nt,from:Dt,to:Bt}),E(Ne,"Runner");class Re extends Mt{constructor(t,e=t){super(M("svg",t),e),this.namespace()}defs(){return this.isRoot()?x(this.node.querySelector("defs"))||this.put(new xt):this.root().defs()}isRoot(){return!this.node.parentNode||!(this.node.parentNode instanceof g.window.SVGElement)&&"#document-fragment"!==this.node.parentNode.nodeName}namespace(){return this.isRoot()?this.attr({xmlns:d,version:"1.1"}).attr("xmlns:xlink",p,m).attr("xmlns:svgjs","http://svgjs.dev/svgjs",m):this.root().namespace()}removeNamespace(){return this.attr({xmlns:null,version:null}).attr("xmlns:xlink",null,m).attr("xmlns:svgjs",null,m)}root(){return this.isRoot()?this:super.root()}}r({Container:{nested:C((function(){return this.put(new Re)}))}}),E(Re,"Svg",!0);class Ie extends Mt{constructor(t,e=t){super(M("symbol",t),e)}}r({Container:{symbol:C((function(){return this.put(new Ie)}))}}),E(Ie,"Symbol");var Le={__proto__:null,plain:function(t){return!1===this._build&&this.clear(),this.node.appendChild(g.document.createTextNode(t)),this},length:function(){return this.node.getComputedTextLength()},x:function(t,e=this.bbox()){return null==t?e.x:this.attr("x",this.attr("x")+t-e.x)},y:function(t,e=this.bbox()){return null==t?e.y:this.attr("y",this.attr("y")+t-e.y)},move:function(t,e,i=this.bbox()){return this.x(t,i).y(e,i)},cx:function(t,e=this.bbox()){return null==t?e.cx:this.attr("x",this.attr("x")+t-e.cx)},cy:function(t,e=this.bbox()){return null==t?e.cy:this.attr("y",this.attr("y")+t-e.cy)},center:function(t,e,i=this.bbox()){return this.cx(t,i).cy(e,i)},ax:function(t){return this.attr("x",t)},ay:function(t){return this.attr("y",t)},amove:function(t,e){return this.ax(t).ay(e)},build:function(t){return this._build=!!t,this}};class je extends At{constructor(t,e=t){super(M("text",t),e),this.dom.leading=new yt(1.3),this._rebuild=!0,this._build=!1}leading(t){return null==t?this.dom.leading:(this.dom.leading=new yt(t),this.rebuild())}rebuild(t){if("boolean"==typeof t&&(this._rebuild=t),this._rebuild){const t=this;let e=0;const i=this.dom.leading;this.each((function(r){const n=g.window.getComputedStyle(this.node).getPropertyValue("font-size"),s=i*new yt(n);this.dom.newLined&&(this.attr("x",t.attr("x")),"\n"===this.text()?e+=s:(this.attr("dy",r?s+e:0),e=0))})),this.fire("rebuild")}return this}setData(t){return this.dom=t,this.dom.leading=new yt(t.leading||1.3),this}text(t){if(void 0===t){const e=this.node.childNodes;let i=0;t="";for(let r=0,n=e.length;r<n;++r)"textPath"!==e[r].nodeName?(r!==i&&3!==e[r].nodeType&&!0===x(e[r]).dom.newLined&&(t+="\n"),t+=e[r].textContent):0===r&&(i=1);return t}if(this.clear().build(!0),"function"==typeof t)t.call(this,this);else for(let e=0,i=(t=(t+"").split("\n")).length;e<i;e++)this.newLine(t[e]);return this.build(!1).rebuild()}}k(je,Le),r({Container:{text:C((function(t=""){return this.put(new je).text(t)})),plain:C((function(t=""){return this.put(new je).plain(t)}))}}),E(je,"Text");class De extends At{constructor(t,e=t){super(M("tspan",t),e),this._build=!1}dx(t){return this.attr("dx",t)}dy(t){return this.attr("dy",t)}newLine(){this.dom.newLined=!0;const t=this.parent();if(!(t instanceof je))return this;const e=t.index(this),i=g.window.getComputedStyle(this.node).getPropertyValue("font-size"),r=t.dom.leading*new yt(i);return this.dy(e?r:0).attr("x",t.x())}text(t){return null==t?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof t?(this.clear().build(!0),t.call(this,this),this.build(!1)):this.plain(t),this)}}k(De,Le),r({Tspan:{tspan:C((function(t=""){const e=new De;return this._build||this.clear(),this.put(e).text(t)}))},Text:{newLine:function(t=""){return this.tspan(t).newLine()}}}),E(De,"Tspan");class Be extends At{constructor(t,e=t){super(M("circle",t),e)}radius(t){return this.attr("r",t)}rx(t){return this.attr("r",t)}ry(t){return this.rx(t)}size(t){return this.radius(new yt(t).divide(2))}}k(Be,{x:Ot,y:St,cx:kt,cy:Ct,width:Tt,height:Rt}),r({Container:{circle:C((function(t=0){return this.put(new Be).size(t).move(0,0)}))}}),E(Be,"Circle");class ze extends Mt{constructor(t,e=t){super(M("clipPath",t),e)}remove(){return this.targets().forEach((function(t){t.unclip()})),super.remove()}targets(){return rt('svg [clip-path*="'+this.id()+'"]')}}r({Container:{clip:C((function(){return this.defs().put(new ze)}))},Element:{clipper(){return this.reference("clip-path")},clipWith(t){const e=t instanceof ze?t:this.parent().clip().add(t);return this.attr("clip-path",'url("#'+e.id()+'")')},unclip(){return this.attr("clip-path",null)}}}),E(ze,"ClipPath");class Pe extends bt{constructor(t,e=t){super(M("foreignObject",t),e)}}r({Container:{foreignObject:C((function(t,e){return this.put(new Pe).size(t,e)}))}}),E(Pe,"ForeignObject");var Fe={__proto__:null,dmove:function(t,e){return this.children().forEach(((i,r)=>{let n;try{n=i.bbox()}catch(t){return}const s=new K(i),o=s.translate(t,e).transform(s.inverse()),h=new Y(n.x,n.y).transform(o);i.move(h.x,h.y)})),this},dx:function(t){return this.dmove(t,0)},dy:function(t){return this.dmove(0,t)},height:function(t,e=this.bbox()){return null==t?e.height:this.size(e.width,t,e)},move:function(t=0,e=0,i=this.bbox()){const r=t-i.x,n=e-i.y;return this.dmove(r,n)},size:function(t,e,i=this.bbox()){const r=c(this,t,e,i),n=r.width/i.width,s=r.height/i.height;return this.children().forEach(((t,e)=>{const r=new Y(i).transform(new K(t).inverse());t.scale(n,s,r.x,r.y)})),this},width:function(t,e=this.bbox()){return null==t?e.width:this.size(t,e.height,e)},x:function(t,e=this.bbox()){return null==t?e.x:this.move(t,e.y,e)},y:function(t,e=this.bbox()){return null==t?e.y:this.move(e.x,t,e)}};class Ue extends Mt{constructor(t,e=t){super(M("g",t),e)}}k(Ue,Fe),r({Container:{group:C((function(){return this.put(new Ue)}))}}),E(Ue,"G");class qe extends Mt{constructor(t,e=t){super(M("a",t),e)}target(t){return this.attr("target",t)}to(t){return this.attr("href",t,p)}}k(qe,Fe),r({Container:{link:C((function(t){return this.put(new qe).to(t)}))},Element:{unlink(){const t=this.linker();if(!t)return this;const e=t.parent();if(!e)return this.remove();const i=e.index(t);return e.add(this,i),t.remove(),this},linkTo(t){let e=this.linker();return e||(e=new qe,this.wrap(e)),"function"==typeof t?t.call(e,e):e.to(t),this},linker(){const t=this.parent();return t&&"a"===t.node.nodeName.toLowerCase()?t:null}}}),E(qe,"A");class He extends Mt{constructor(t,e=t){super(M("mask",t),e)}remove(){return this.targets().forEach((function(t){t.unmask()})),super.remove()}targets(){return rt('svg [mask*="'+this.id()+'"]')}}r({Container:{mask:C((function(){return this.defs().put(new He)}))},Element:{masker(){return this.reference("mask")},maskWith(t){const e=t instanceof He?t:this.parent().mask().add(t);return this.attr("mask",'url("#'+e.id()+'")')},unmask(){return this.attr("mask",null)}}}),E(He,"Mask");class Ze extends bt{constructor(t,e=t){super(M("stop",t),e)}update(t){return("number"==typeof t||t instanceof yt)&&(t={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new yt(t.offset)),this}}r({Gradient:{stop:function(t,e,i){return this.put(new Ze).update(t,e,i)}}}),E(Ze,"Stop");class Ge extends bt{constructor(t,e=t){super(M("style",t),e)}addText(t=""){return this.node.textContent+=t,this}font(t,e,i={}){return this.rule("@font-face",{fontFamily:t,src:e,...i})}rule(t,e){return this.addText(function(t,e){if(!t)return"";if(!e)return t;let i=t+"{";for(const t in e)i+=t.replace(/([A-Z])/g,(function(t,e){return"-"+e.toLowerCase()}))+":"+e[t]+";";return i+="}",i}(t,e))}}r("Dom",{style(t,e){return this.put(new Ge).rule(t,e)},fontface(t,e,i){return this.put(new Ge).font(t,e,i)}}),E(Ge,"Style");class Xe extends je{constructor(t,e=t){super(M("textPath",t),e)}array(){const t=this.track();return t?t.array():null}plot(t){const e=this.track();let i=null;return e&&(i=e.plot(t)),null==t?i:this}track(){return this.reference("href")}}r({Container:{textPath:C((function(t,e){return t instanceof je||(t=this.text(t)),t.path(e)}))},Text:{path:C((function(t,e=!0){const i=new Xe;let r;if(t instanceof ge||(t=this.defs().path(t)),i.attr("href","#"+t,p),e)for(;r=this.node.firstChild;)i.node.appendChild(r);return this.put(i)})),textPath(){return this.findOne("textPath")}},Path:{text:C((function(t){return t instanceof je||(t=(new je).addTo(this.parent()).text(t)),t.path(this)})),targets(){return rt("svg textPath").filter((t=>(t.attr("href")||"").includes(this.id())))}}}),Xe.prototype.MorphArray=ue,E(Xe,"TextPath");class Ve extends At{constructor(t,e=t){super(M("use",t),e)}use(t,e){return this.attr("href",(e||"")+"#"+t,p)}}r({Container:{use:C((function(t,e){return this.put(new Ve).use(t,e)}))}}),E(Ve,"Use");const Ye=_;k([Re,Ie,qt,Ut,Xt],n("viewbox")),k([Gt,ve,we,ge],n("marker")),k(je,n("Text")),k(ge,n("Path")),k(xt,n("Defs")),k([je,De],n("Tspan")),k([be,Lt,Ft,Ne],n("radius")),k(lt,n("EventTarget")),k(vt,n("Dom")),k(bt,n("Element")),k(At,n("Shape")),k([Mt,jt],n("Container")),k(Ft,n("Gradient")),k(Ne,n("Runner")),et.extend([...new Set(e)]),function(t=[]){pe.push(...[].concat(t))}([yt,V,Q,K,gt,Ht,ue]),k(pe,{to(t){return(new le).type(this.constructor).from(this.valueOf()).to(t)},fromArray(t){return this.init(t),this}});var We=i(550),Ke=i.n(We);let $e=!1,Je=!1;const Qe={debug:1,default:2,info:2,warning:3,error:4,off:5};let ti=Qe.default,ei=null;const ii=function(){try{const t=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(i){t.push(e)}})),t.length)throw new Error("missing "+t.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(t){return t.message}return null}();var ri,ni;!function(t){t.DEBUG="DEBUG",t.INFO="INFO",t.WARNING="WARNING",t.ERROR="ERROR",t.OFF="OFF"}(ri||(ri={})),function(t){t.UNKNOWN_ERROR="UNKNOWN_ERROR",t.NOT_IMPLEMENTED="NOT_IMPLEMENTED",t.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",t.NETWORK_ERROR="NETWORK_ERROR",t.SERVER_ERROR="SERVER_ERROR",t.TIMEOUT="TIMEOUT",t.BUFFER_OVERRUN="BUFFER_OVERRUN",t.NUMERIC_FAULT="NUMERIC_FAULT",t.MISSING_NEW="MISSING_NEW",t.INVALID_ARGUMENT="INVALID_ARGUMENT",t.MISSING_ARGUMENT="MISSING_ARGUMENT",t.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",t.CALL_EXCEPTION="CALL_EXCEPTION",t.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",t.NONCE_EXPIRED="NONCE_EXPIRED",t.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",t.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",t.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(ni||(ni={}));const si="0123456789abcdef";class oi{constructor(t){Object.defineProperty(this,"version",{enumerable:!0,value:t,writable:!1})}_log(t,e){const i=t.toLowerCase();null==Qe[i]&&this.throwArgumentError("invalid log level name","logLevel",t),ti>Qe[i]||console.log.apply(console,e)}debug(...t){this._log(oi.levels.DEBUG,t)}info(...t){this._log(oi.levels.INFO,t)}warn(...t){this._log(oi.levels.WARNING,t)}makeError(t,e,i){if(Je)return this.makeError("censored error",e,{});e||(e=oi.errors.UNKNOWN_ERROR),i||(i={});const r=[];Object.keys(i).forEach((t=>{const e=i[t];try{if(e instanceof Uint8Array){let i="";for(let t=0;t<e.length;t++)i+=si[e[t]>>4],i+=si[15&e[t]];r.push(t+"=Uint8Array(0x"+i+")")}else r.push(t+"="+JSON.stringify(e))}catch(e){r.push(t+"="+JSON.stringify(i[t].toString()))}})),r.push(`code=${e}`),r.push(`version=${this.version}`);const n=t;r.length&&(t+=" ("+r.join(", ")+")");const s=new Error(t);return s.reason=n,s.code=e,Object.keys(i).forEach((function(t){s[t]=i[t]})),s}throwError(t,e,i){throw this.makeError(t,e,i)}throwArgumentError(t,e,i){return this.throwError(t,oi.errors.INVALID_ARGUMENT,{argument:e,value:i})}assert(t,e,i,r){t||this.throwError(e,i,r)}assertArgument(t,e,i,r){t||this.throwArgumentError(e,i,r)}checkNormalize(t){null==t&&(t="platform missing String.prototype.normalize"),ii&&this.throwError("platform missing String.prototype.normalize",oi.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:ii})}checkSafeUint53(t,e){"number"==typeof t&&(null==e&&(e="value not safe"),(t<0||t>=9007199254740991)&&this.throwError(e,oi.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:t}),t%1&&this.throwError(e,oi.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:t}))}checkArgumentCount(t,e,i){i=i?": "+i:"",t<e&&this.throwError("missing argument"+i,oi.errors.MISSING_ARGUMENT,{count:t,expectedCount:e}),t>e&&this.throwError("too many arguments"+i,oi.errors.UNEXPECTED_ARGUMENT,{count:t,expectedCount:e})}checkNew(t,e){t!==Object&&null!=t||this.throwError("missing new",oi.errors.MISSING_NEW,{name:e.name})}checkAbstract(t,e){t===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",oi.errors.UNSUPPORTED_OPERATION,{name:t.name,operation:"new"}):t!==Object&&null!=t||this.throwError("missing new",oi.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return ei||(ei=new oi("logger/5.5.0")),ei}static setCensorship(t,e){if(!t&&e&&this.globalLogger().throwError("cannot permanently disable censorship",oi.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),$e){if(!t)return;this.globalLogger().throwError("error censorship permanent",oi.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}Je=!!t,$e=!!e}static setLogLevel(t){const e=Qe[t.toLowerCase()];null!=e?ti=e:oi.globalLogger().warn("invalid log level - "+t)}static from(t){return new oi(t)}}oi.errors=ni,oi.levels=ri;const hi=new oi("bytes/5.5.0");function ui(t){return!!t.toHexString}function ai(t){return t.slice||(t.slice=function(){const e=Array.prototype.slice.call(arguments);return ai(new Uint8Array(Array.prototype.slice.apply(t,e)))}),t}function li(t){return"number"==typeof t&&t==t&&t%1==0}function ci(t){if(null==t)return!1;if(t.constructor===Uint8Array)return!0;if("string"==typeof t)return!1;if(!li(t.length)||t.length<0)return!1;for(let e=0;e<t.length;e++){const i=t[e];if(!li(i)||i<0||i>=256)return!1}return!0}function fi(t,e){if(e||(e={}),"number"==typeof t){hi.checkSafeUint53(t,"invalid arrayify value");const e=[];for(;t;)e.unshift(255&t),t=parseInt(String(t/256));return 0===e.length&&e.push(0),ai(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),ui(t)&&(t=t.toHexString()),di(t)){let i=t.substring(2);i.length%2&&("left"===e.hexPad?i="0x0"+i.substring(2):"right"===e.hexPad?i+="0":hi.throwArgumentError("hex data is odd-length","value",t));const r=[];for(let t=0;t<i.length;t+=2)r.push(parseInt(i.substring(t,t+2),16));return ai(new Uint8Array(r))}return ci(t)?ai(new Uint8Array(t)):hi.throwArgumentError("invalid arrayify value","value",t)}function di(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||e&&t.length!==2+2*e)}const mi="0123456789abcdef";var pi=Ke().BN;const gi=new oi("bignumber/5.5.0"),yi={},wi=9007199254740991;let vi=!1;class bi{constructor(t,e){gi.checkNew(new.target,bi),t!==yi&&gi.throwError("cannot call constructor directly; use BigNumber.from",oi.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=e,this._isBigNumber=!0,Object.freeze(this)}fromTwos(t){return Mi(xi(this).fromTwos(t))}toTwos(t){return Mi(xi(this).toTwos(t))}abs(){return"-"===this._hex[0]?bi.from(this._hex.substring(1)):this}add(t){return Mi(xi(this).add(xi(t)))}sub(t){return Mi(xi(this).sub(xi(t)))}div(t){return bi.from(t).isZero()&&Ai("division by zero","div"),Mi(xi(this).div(xi(t)))}mul(t){return Mi(xi(this).mul(xi(t)))}mod(t){const e=xi(t);return e.isNeg()&&Ai("cannot modulo negative values","mod"),Mi(xi(this).umod(e))}pow(t){const e=xi(t);return e.isNeg()&&Ai("cannot raise to negative values","pow"),Mi(xi(this).pow(e))}and(t){const e=xi(t);return(this.isNegative()||e.isNeg())&&Ai("cannot 'and' negative values","and"),Mi(xi(this).and(e))}or(t){const e=xi(t);return(this.isNegative()||e.isNeg())&&Ai("cannot 'or' negative values","or"),Mi(xi(this).or(e))}xor(t){const e=xi(t);return(this.isNegative()||e.isNeg())&&Ai("cannot 'xor' negative values","xor"),Mi(xi(this).xor(e))}mask(t){return(this.isNegative()||t<0)&&Ai("cannot mask negative values","mask"),Mi(xi(this).maskn(t))}shl(t){return(this.isNegative()||t<0)&&Ai("cannot shift negative values","shl"),Mi(xi(this).shln(t))}shr(t){return(this.isNegative()||t<0)&&Ai("cannot shift negative values","shr"),Mi(xi(this).shrn(t))}eq(t){return xi(this).eq(xi(t))}lt(t){return xi(this).lt(xi(t))}lte(t){return xi(this).lte(xi(t))}gt(t){return xi(this).gt(xi(t))}gte(t){return xi(this).gte(xi(t))}isNegative(){return"-"===this._hex[0]}isZero(){return xi(this).isZero()}toNumber(){try{return xi(this).toNumber()}catch(t){Ai("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(t){}return gi.throwError("this platform does not support BigInt",oi.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?vi||(vi=!0,gi.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?gi.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",oi.errors.UNEXPECTED_ARGUMENT,{}):gi.throwError("BigNumber.toString does not accept parameters",oi.errors.UNEXPECTED_ARGUMENT,{})),xi(this).toString(10)}toHexString(){return this._hex}toJSON(t){return{type:"BigNumber",hex:this.toHexString()}}static from(t){if(t instanceof bi)return t;if("string"==typeof t)return t.match(/^-?0x[0-9a-f]+$/i)?new bi(yi,_i(t)):t.match(/^-?[0-9]+$/)?new bi(yi,_i(new pi(t))):gi.throwArgumentError("invalid BigNumber string","value",t);if("number"==typeof t)return t%1&&Ai("underflow","BigNumber.from",t),(t>=wi||t<=-wi)&&Ai("overflow","BigNumber.from",t),bi.from(String(t));const e=t;if("bigint"==typeof e)return bi.from(e.toString());if(ci(e))return bi.from(function(t,e){if(e||(e={}),"number"==typeof t){hi.checkSafeUint53(t,"invalid hexlify value");let e="";for(;t;)e=mi[15&t]+e,t=Math.floor(t/16);return e.length?(e.length%2&&(e="0"+e),"0x"+e):"0x00"}if("bigint"==typeof t)return(t=t.toString(16)).length%2?"0x0"+t:"0x"+t;if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),ui(t))return t.toHexString();if(di(t))return t.length%2&&("left"===e.hexPad?t="0x0"+t.substring(2):"right"===e.hexPad?t+="0":hi.throwArgumentError("hex data is odd-length","value",t)),t.toLowerCase();if(ci(t)){let e="0x";for(let i=0;i<t.length;i++){let r=t[i];e+=mi[(240&r)>>4]+mi[15&r]}return e}return hi.throwArgumentError("invalid hexlify value","value",t)}(e));if(e)if(e.toHexString){const t=e.toHexString();if("string"==typeof t)return bi.from(t)}else{let t=e._hex;if(null==t&&"BigNumber"===e.type&&(t=e.hex),"string"==typeof t&&(di(t)||"-"===t[0]&&di(t.substring(1))))return bi.from(t)}return gi.throwArgumentError("invalid BigNumber value","value",t)}static isBigNumber(t){return!(!t||!t._isBigNumber)}}function _i(t){if("string"!=typeof t)return _i(t.toString(16));if("-"===t[0])return"-"===(t=t.substring(1))[0]&&gi.throwArgumentError("invalid hex","value",t),"0x00"===(t=_i(t))?t:"-"+t;if("0x"!==t.substring(0,2)&&(t="0x"+t),"0x"===t)return"0x00";for(t.length%2&&(t="0x0"+t.substring(2));t.length>4&&"0x00"===t.substring(0,4);)t="0x"+t.substring(4);return t}function Mi(t){return bi.from(_i(t))}function xi(t){const e=bi.from(t).toHexString();return"-"===e[0]?new pi("-"+e.substring(3),16):new pi(e.substring(2),16)}function Ai(t,e,i){const r={fault:t,operation:e};return null!=i&&(r.value=i),gi.throwError(t,oi.errors.NUMERIC_FAULT,r)}var Ei=i(94),Ni=i.n(Ei);const Oi=new oi("address/5.5.0");function Si(t){di(t,20)||Oi.throwArgumentError("invalid address","address",t);const e=(t=t.toLowerCase()).substring(2).split(""),i=new Uint8Array(40);for(let t=0;t<40;t++)i[t]=e[t].charCodeAt(0);const r=fi((n=i,"0x"+Ni().keccak_256(fi(n))));var n;for(let t=0;t<40;t+=2)r[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&r[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return"0x"+e.join("")}const ki={};for(let t=0;t<10;t++)ki[String(t)]=String(t);for(let t=0;t<26;t++)ki[String.fromCharCode(65+t)]=String(10+t);const Ci=Math.floor((Ti=9007199254740991,Math.log10?Math.log10(Ti):Math.log(Ti)/Math.LN10));var Ti;function Ri(t){let e=null;if("string"!=typeof t&&Oi.throwArgumentError("invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==t.substring(0,2)&&(t="0x"+t),e=Si(t),t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&e!==t&&Oi.throwArgumentError("bad address checksum","address",t);else if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(t.substring(2,4)!==function(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>ki[t])).join("");for(;e.length>=Ci;){let t=e.substring(0,Ci);e=parseInt(t,10)%97+e.substring(t.length)}let i=String(98-parseInt(e,10)%97);for(;i.length<2;)i="0"+i;return i}(t)&&Oi.throwArgumentError("bad icap checksum","address",t),i=t.substring(4),e=new pi(i,36).toString(16);e.length<40;)e="0"+e;e=Si("0x"+e)}else Oi.throwArgumentError("invalid address","address",t);var i;return e}for(var Ii=function(t,e,i){if(i||2===arguments.length)for(var r,n=0,s=e.length;n<s;n++)!r&&n in e||(r||(r=Array.prototype.slice.call(e,0,n)),r[n]=e[n]);return t.concat(r||Array.prototype.slice.call(e))},Li="#FAF3E8",ji="#FE4465",Di="#222",Bi="#1A49EF",zi="#F8D938",Pi={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15},Fi=function(t){return bi.from("0x"+t.join("")).toNumber()},Ui=function(t){var e=t.positions,i=t.positionKind,r=t.sizes,n=t.layers,s=t.solid;return e.flatMap((function(t){return r.flatMap((function(e){return n.map((function(r){return{positionIndex:t,positionKind:i,size:e,layer:r,solid:s}}))}))}))},qi=Ii(Ii(Ii(Ii(Ii(Ii(Ii([null],Ui({positionKind:"intersection",positions:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],sizes:[1,2,3],layers:[2]}),!0),Ui({positionKind:"intersection",positions:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],sizes:[1,2],layers:[1,2],solid:!0}),!0),Ui({positionKind:"intersection",positions:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],sizes:[3],layers:[0,1],solid:!0}),!0),Ui({positionKind:"sector",positions:[0,1,2,3,4,5,6,7,8],sizes:[1,2],layers:[1,2]}),!0),Ui({positionKind:"sector",positions:[0,1,2,3,4,5,6,7,8],sizes:[0,1],layers:[0,1,2],solid:!0}),!0),Ui({positionKind:"sector",positions:[0,1,2,3,4,5,6,7,8],sizes:[2],layers:[0,1],solid:!0}),!0),Ui({positionKind:"sector",positions:[4],sizes:[1,2],layers:[0]}),!0),Hi=function(t,e,i){if(void 0===i&&(i=1),e){var r,n=100,s=0,o=0,h=0;switch(e.size){case 0:s=10;break;case 1:s=48.8;break;case 2:s=90;break;case 3:s=190}2===e.layer&&(s+=.5),"intersection"===e.positionKind&&(o=n*((r=e.positionIndex)%4),h=r>11?300:r>7?200:r>3?n:0),"sector"===e.positionKind&&(o=n*((r=e.positionIndex)%3),h=r>5?200:r>2?n:0,o+=50,h+=50),t.circle().size(s*i).stroke({width:10*i,color:Li}).fill(e.solid?Li:"none").translate(o*i,h*i)}},Zi={0:[ji,zi,Di],1:[ji,Di,Bi],2:[ji,zi,Bi],3:[ji,Bi,zi],4:[Bi,zi,ji],5:[Bi,ji,zi],6:[Bi,zi,zi],7:[Bi,Di,ji],8:[Di,ji,zi],9:[Di,ji,Bi],10:[Di,Bi,ji],11:[Di,zi,Bi],12:[zi,ji,Di],13:[zi,Bi,ji],14:[zi,Di,Bi],15:[zi,Di,ji]},Gi={0:'<path d="M100 100L100 0H0C0 55.2285 44.7715 100 100 100Z" fill="#000"/>',1:'<path d="M0 100L0 0H100C100 55.2285 55.2285 100 0 100Z" fill="#000"/>',2:'<path d="M0 0L0 100H100C100 44.7715 55.2285 0 0 0Z" fill="#000"/>',3:'<path d="M100 0L100 100H0C0 44.7715 44.7715 0 100 0Z" fill="#000"/>',4:'<circle cx="50" cy="50" r="50" fill="#000"/>',5:'<circle cx="50" cy="50" r="20" fill="#000"/>',6:'<path d="M0 0C0 55.2285 44.7715 100 100 100C100 44.7715 55.2285 0 0 0Z" fill="#000"/>',7:'<path d="M0 100C0 44.7715 44.7715 0 100 0C100 55.2285 55.2285 100 0 100Z" fill="#000"/>',8:'<path d="M100 0H0L100 100V0Z" fill="#000"/>',9:'<path d="M0 0H100L0 100V0Z" fill="#000"/>',10:'<path d="M0 100H100L0 0V100Z" fill="#000"/>',11:'<path d="M100 100H0L100 0V100Z" fill="#000"/>',12:'<path d="M50 100C50 72.3858 27.6142 50 0 50V100H50Z" fill="#000"/>',13:'<path d="M50 100C50 72.3858 72.3858 50 100 50V100H50Z" fill="#000"/>',14:'<path d="M50 0C50 27.6142 72.3858 50 100 50V0H50Z" fill="#000"/>',15:'<path d="M50 0C50 27.6142 27.6142 50 0 50V0H50Z" fill="#000"/>'},Xi=function(t,e){void 0===e&&(e=1);var i=t.startsWith("0x")?t.split("0x")[1]:t;if(!function(t){try{return Ri(t),!0}catch(t){}return!1}(i=i.substr(i.length-40,40))||40!==i.length)throw t+" is not a valid Tile address.";var r=function(t){var e=[];return t.split("").reduce((function(t,i){if(e.push(i),4===e.length){var r=e;return e=[],Ii(Ii([],t,!0),[r],!1)}return t}),[])}(i),n=r[0],s=function(t){return t.map((function(t){var e=function(t){var e=Zi[t];return{layer0:e[0],layer1:e[1],layer2:e[2]}}(Pi[t[0]]);return[{svg:Gi[Pi[t[1]]],color:e.layer0},{svg:Gi[Pi[t[2]]],color:e.layer1},{svg:Gi[Pi[t[3]]],color:e.layer2}]}))}(r.slice(1)),o=360*e,h=Ye().size(o,o);h.rect(o,o).fill(Li);for(var u=h.group(),a=qi[Fi([n[0],n[1]])],l=qi[Fi([n[2],n[3]])],c=function(t){for(var i=u.group(),r=function(r){var n=i.group();r>0&&n.translate(r%3*100*e,0),r>=6?n.translate(0,200*e):r>=3&&n.translate(0,100*e),n.scale(e),function(e){var i=e[t],r=i.svg,s=i.color;if(r.startsWith("<path")&&n.path(function(t){var e=t.slice(t.indexOf('d="')+3);return e.slice(0,e.indexOf('"'))}(r)).css({opacity:".88"}).fill(s),r.startsWith("<circle")){var o=function(t){var e=t.slice(t.indexOf('cx="')+4),i=parseFloat(e.slice(0,e.indexOf('"'))),r=t.slice(t.indexOf('cy="')+4),n=parseFloat(r.slice(0,r.indexOf('"'))),s=t.slice(t.indexOf('r="')+3);return{cx:i,cy:n,r:parseFloat(s.slice(0,s.indexOf('"')))}}(r),h=o.cx,u=o.cy,a=o.r;n.circle(2*a).css({opacity:".88"}).translate(h-a,u-a).fill(s)}}(s[r])},n=0;n<9;n++)r(n);(null==a?void 0:a.layer)===t&&Hi(i,a,e),(null==l?void 0:l.layer)===t&&Hi(i,l,e)},f=0;f<3;f++)c(f);return u.translate(30*e,30*e),h},Vi=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],Yi="",Wi=1e3,Ki=1,$i=function(){return Vi[Math.floor(Math.random()*Vi.length)]},Ji=0;Ji<40;Ji++)Yi+=$i();!function t(){for(var e=Yi.split(""),i=0;i<Ki;i++)e[Math.floor(40*Math.random())]=$i();Yi=e.join(""),console.log(Yi);var r=document.getElementById("canvas");r&&(r.innerHTML=Xi(Yi).svg()),setTimeout((function(){t()}),Wi)}(),window.phaseInterval=function(t){Wi=t},window.phaseRate=function(t){0===t||t>40||(Ki=t)},window.tileAddress=function(t){t.startsWith("0x")&&(t=t.split("0x")[1]),40===t.length&&(t.toLowerCase().split("").some((function(t){return!Vi.includes(t)}))||(Yi=t.toLowerCase()))},console.log("Call phaseInterval(millis) to set phase interval in milliseconds."),console.log("Call phaseRate(rate) to set number of address characters to change in each phase."),console.log("Call tileAddress(address) to reset Tile for that address.")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,